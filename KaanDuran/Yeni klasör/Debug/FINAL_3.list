
FINAL_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007308  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074fc  080074fc  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007504  08007504  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800750c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00001c78  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d78  20001d78  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136bb  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f15  00000000  00000000  000337eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00036700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f40  00000000  00000000  00037798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a13  00000000  00000000  000386d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014221  00000000  00000000  0005c0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc61a  00000000  00000000  0007030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c926  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004520  00000000  00000000  0013c978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007478 	.word	0x08007478

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08007478 	.word	0x08007478

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <function>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);

int function(char *str1){
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]


	int sum = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
	for(int x=0;str1[x]!='\0';x++){
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	e00a      	b.n	80004f4 <function+0x28>

		sum = sum +(int)str1[x];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	4413      	add	r3, r2
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	461a      	mov	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4413      	add	r3, r2
 80004ec:	60fb      	str	r3, [r7, #12]
	for(int x=0;str1[x]!='\0';x++){
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	3301      	adds	r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d1ee      	bne.n	80004de <function+0x12>


	}
	return sum;
 8000500:	68fb      	ldr	r3, [r7, #12]

}
 8000502:	4618      	mov	r0, r3
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <CDC_Receive_FS>:



static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	480e      	ldr	r0, [pc, #56]	; (8000558 <CDC_Receive_FS+0x48>)
 800051e:	f004 fed9 	bl	80052d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000522:	480d      	ldr	r0, [pc, #52]	; (8000558 <CDC_Receive_FS+0x48>)
 8000524:	f004 ff3a 	bl	800539c <USBD_CDC_ReceivePacket>
  // Process the received data
    for (uint32_t i = 0; i < *Len; i++)
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e009      	b.n	8000542 <CDC_Receive_FS+0x32>
    {
      // Echo back the received character
      CDC_Transmit_FS(&Buf[i], 1);
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	2101      	movs	r1, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f006 fb16 	bl	8006b68 <CDC_Transmit_FS>
    for (uint32_t i = 0; i < *Len; i++)
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	3301      	adds	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	429a      	cmp	r2, r3
 800054a:	d3f0      	bcc.n	800052e <CDC_Receive_FS+0x1e>
    }
  return (USBD_OK);
 800054c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800054e:	4618      	mov	r0, r3
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000170 	.word	0x20000170

0800055c <main>:

int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af00      	add	r7, sp, #0

  HAL_Init();
 8000562:	f000 fa1b 	bl	800099c <HAL_Init>


  SystemClock_Config();
 8000566:	f000 f875 	bl	8000654 <SystemClock_Config>


  MX_GPIO_Init();
 800056a:	f000 f8d7 	bl	800071c <MX_GPIO_Init>
  MX_TIM3_Init();
 800056e:	f000 f8fb 	bl	8000768 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000572:	f006 fa3b 	bl	80069ec <MX_USB_DEVICE_Init>
  char name[8] = "kaan";
 8000576:	4a31      	ldr	r2, [pc, #196]	; (800063c <main+0xe0>)
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000580:	6018      	str	r0, [r3, #0]
 8000582:	3304      	adds	r3, #4
 8000584:	7019      	strb	r1, [r3, #0]
 8000586:	f107 0315 	add.w	r3, r7, #21
 800058a:	2200      	movs	r2, #0
 800058c:	801a      	strh	r2, [r3, #0]
 800058e:	709a      	strb	r2, [r3, #2]

    	char ASciisurname[9]= "duran";
 8000590:	4a2b      	ldr	r2, [pc, #172]	; (8000640 <main+0xe4>)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000598:	6018      	str	r0, [r3, #0]
 800059a:	3304      	adds	r3, #4
 800059c:	8019      	strh	r1, [r3, #0]
 800059e:	f107 030a 	add.w	r3, r7, #10
 80005a2:	2100      	movs	r1, #0
 80005a4:	460a      	mov	r2, r1
 80005a6:	801a      	strh	r2, [r3, #0]
 80005a8:	460a      	mov	r2, r1
 80005aa:	709a      	strb	r2, [r3, #2]

    	int asciisur = function(ASciisurname);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff8c 	bl	80004cc <function>
 80005b4:	6278      	str	r0, [r7, #36]	; 0x24

    	int asciiname = function(name);
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ff86 	bl	80004cc <function>
 80005c0:	6238      	str	r0, [r7, #32]

    	int pin1= (asciiname % 16)+1 ;
 80005c2:	6a3b      	ldr	r3, [r7, #32]
 80005c4:	425a      	negs	r2, r3
 80005c6:	f003 030f 	and.w	r3, r3, #15
 80005ca:	f002 020f 	and.w	r2, r2, #15
 80005ce:	bf58      	it	pl
 80005d0:	4253      	negpl	r3, r2
 80005d2:	3301      	adds	r3, #1
 80005d4:	61fb      	str	r3, [r7, #28]

    	int pin2=(asciisur %16)+1;
 80005d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d8:	425a      	negs	r2, r3
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	f002 020f 	and.w	r2, r2, #15
 80005e2:	bf58      	it	pl
 80005e4:	4253      	negpl	r3, r2
 80005e6:	3301      	adds	r3, #1
 80005e8:	61bb      	str	r3, [r7, #24]


  HAL_TIM_Base_Start(&htim3);
 80005ea:	4816      	ldr	r0, [pc, #88]	; (8000644 <main+0xe8>)
 80005ec:	f002 fc64 	bl	8002eb8 <HAL_TIM_Base_Start>


  while (1)
  {
    // Sending  via USB
    CDC_Transmit_FS(&outputChar, 1);
 80005f0:	2101      	movs	r1, #1
 80005f2:	4815      	ldr	r0, [pc, #84]	; (8000648 <main+0xec>)
 80005f4:	f006 fab8 	bl	8006b68 <CDC_Transmit_FS>

    // Output the character on GPIOB pin 12
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fe:	4813      	ldr	r0, [pc, #76]	; (800064c <main+0xf0>)
 8000600:	f000 fd44 	bl	800108c <HAL_GPIO_WritePin>

    // Delay  2 seconds
    HAL_Delay(2000);
 8000604:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000608:	f000 fa3a 	bl	8000a80 <HAL_Delay>

    // Read the input value from GPIOB pin 11
    inputChar = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 800060c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <main+0xf0>)
 8000612:	f000 fd23 	bl	800105c <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <main+0xf4>)
 800061c:	701a      	strb	r2, [r3, #0]

    // Receiving via USB
    CDC_Receive_FS(&inputChar, 1);
 800061e:	2101      	movs	r1, #1
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <main+0xf4>)
 8000622:	f7ff ff75 	bl	8000510 <CDC_Receive_FS>


    outputChar++;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <main+0xec>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <main+0xec>)
 8000630:	701a      	strb	r2, [r3, #0]
    HAL_Delay(2000);
 8000632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000636:	f000 fa23 	bl	8000a80 <HAL_Delay>
    CDC_Transmit_FS(&outputChar, 1);
 800063a:	e7d9      	b.n	80005f0 <main+0x94>
 800063c:	08007490 	.word	0x08007490
 8000640:	08007498 	.word	0x08007498
 8000644:	2000011c 	.word	0x2000011c
 8000648:	20000000 	.word	0x20000000
 800064c:	40020400 	.word	0x40020400
 8000650:	20000164 	.word	0x20000164

08000654 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <SystemClock_Config+0xbc>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	4a2b      	ldr	r2, [pc, #172]	; (8000710 <SystemClock_Config+0xbc>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6413      	str	r3, [r2, #64]	; 0x40
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <SystemClock_Config+0xbc>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b26      	ldr	r3, [pc, #152]	; (8000714 <SystemClock_Config+0xc0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a25      	ldr	r2, [pc, #148]	; (8000714 <SystemClock_Config+0xc0>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SystemClock_Config+0xc0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000692:	2302      	movs	r3, #2
 8000694:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000696:	2301      	movs	r3, #1
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800069a:	2310      	movs	r3, #16
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069e:	2300      	movs	r3, #0
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 ff86 	bl	80025b8 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006b2:	f000 f88b 	bl	80007cc <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80006b6:	230f      	movs	r3, #15
 80006b8:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f9e9 	bl	8002aa8 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006dc:	f000 f876 	bl	80007cc <Error_Handler>
  }
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80006e0:	f002 fb8e 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <SystemClock_Config+0xc4>)
 80006e8:	fba2 2303 	umull	r2, r3, r2, r3
 80006ec:	099b      	lsrs	r3, r3, #6
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 faef 	bl	8000cd2 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006f4:	2004      	movs	r0, #4
 80006f6:	f000 faf9 	bl	8000cec <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000702:	f000 fabc 	bl	8000c7e <HAL_NVIC_SetPriority>
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000
 8000718:	10624dd3 	.word	0x10624dd3

0800071c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_GPIO_Init+0x44>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <MX_GPIO_Init+0x44>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_GPIO_Init+0x44>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  // Configure GPIO pins 11 and 12 from my name and surname
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800073e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000742:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_GPIO_Init+0x48>)
 8000752:	f000 fae7 	bl	8000d24 <HAL_GPIO_Init>
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40020400 	.word	0x40020400

08000768 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_TIM3_Init+0x5c>)
 8000770:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_TIM3_Init+0x60>)
 8000772:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_TIM3_Init+0x5c>)
 8000776:	2253      	movs	r2, #83	; 0x53
 8000778:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_TIM3_Init+0x5c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_TIM3_Init+0x5c>)
 8000782:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000786:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_TIM3_Init+0x5c>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_TIM3_Init+0x5c>)
 8000790:	f002 fb42 	bl	8002e18 <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 800079a:	f000 f817 	bl	80007cc <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_TIM3_Init+0x5c>)
 80007ac:	f002 fc8c 	bl	80030c8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f809 	bl	80007cc <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000011c 	.word	0x2000011c
 80007c8:	40000400 	.word	0x40000400

080007cc <Error_Handler>:

void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <HAL_MspInit+0x4c>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x4c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <HAL_TIM_Base_MspInit+0x84>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d12b      	bne.n	80008a6 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_TIM_Base_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <HAL_TIM_Base_MspInit+0x88>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_TIM_Base_MspInit+0x88>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_TIM_Base_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <HAL_TIM_Base_MspInit+0x88>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_TIM_Base_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PD2     ------> TIM3_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000886:	2304      	movs	r3, #4
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000896:	2302      	movs	r3, #2
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_TIM_Base_MspInit+0x8c>)
 80008a2:	f000 fa3f 	bl	8000d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40000400 	.word	0x40000400
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020c00 	.word	0x40020c00

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f89a 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <OTG_FS_IRQHandler+0x10>)
 8000916:	f000 fd22 	bl	800135e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000164c 	.word	0x2000164c

08000924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <SystemInit+0x20>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <SystemInit+0x20>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800094e:	490e      	ldr	r1, [pc, #56]	; (8000988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000964:	4c0b      	ldr	r4, [pc, #44]	; (8000994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000972:	f7ff ffd7 	bl	8000924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000976:	f006 fd53 	bl	8007420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fdef 	bl	800055c <main>
  bx  lr    
 800097e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800098c:	0800750c 	.word	0x0800750c
  ldr r2, =_sbss
 8000990:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000994:	20001d78 	.word	0x20001d78

08000998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC_IRQHandler>
	...

0800099c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <HAL_Init+0x40>)
 80009a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_Init+0x40>)
 80009b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_Init+0x40>)
 80009be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f94f 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	200f      	movs	r0, #15
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff ff04 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023c00 	.word	0x40023c00

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x54>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x58>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f967 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00e      	b.n	8000a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d80a      	bhi.n	8000a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f000 f92f 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_InitTick+0x5c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000004 	.word	0x20000004
 8000a38:	2000000c 	.word	0x2000000c
 8000a3c:	20000008 	.word	0x20000008

08000a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x20>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_IncTick+0x24>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	2000000c 	.word	0x2000000c
 8000a64:	20000168 	.word	0x20000168

08000a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000168 	.word	0x20000168

08000a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff ffee 	bl	8000a68 <HAL_GetTick>
 8000a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a98:	d005      	beq.n	8000aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_Delay+0x44>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aa6:	bf00      	nop
 8000aa8:	f7ff ffde 	bl	8000a68 <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d8f7      	bhi.n	8000aa8 <HAL_Delay+0x28>
  {
  }
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000000c 	.word	0x2000000c

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db0b      	blt.n	8000b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f003 021f 	and.w	r2, r3, #31
 8000b44:	4907      	ldr	r1, [pc, #28]	; (8000b64 <__NVIC_EnableIRQ+0x38>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff29 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff3e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff31 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d106      	bne.n	8000d08 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d06:	e005      	b.n	8000d14 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d0e:	f023 0304 	bic.w	r3, r3, #4
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e16b      	b.n	8001018 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 815a 	bne.w	8001012 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d005      	beq.n	8000d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d130      	bne.n	8000dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 0201 	and.w	r2, r3, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d017      	beq.n	8000e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d123      	bne.n	8000e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	69b9      	ldr	r1, [r7, #24]
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0203 	and.w	r2, r3, #3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80b4 	beq.w	8001012 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b60      	ldr	r3, [pc, #384]	; (8001030 <HAL_GPIO_Init+0x30c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a5f      	ldr	r2, [pc, #380]	; (8001030 <HAL_GPIO_Init+0x30c>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <HAL_GPIO_Init+0x30c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec6:	4a5b      	ldr	r2, [pc, #364]	; (8001034 <HAL_GPIO_Init+0x310>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a52      	ldr	r2, [pc, #328]	; (8001038 <HAL_GPIO_Init+0x314>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d02b      	beq.n	8000f4a <HAL_GPIO_Init+0x226>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a51      	ldr	r2, [pc, #324]	; (800103c <HAL_GPIO_Init+0x318>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x222>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a50      	ldr	r2, [pc, #320]	; (8001040 <HAL_GPIO_Init+0x31c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x21e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <HAL_GPIO_Init+0x320>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x21a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	; (8001048 <HAL_GPIO_Init+0x324>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x216>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4d      	ldr	r2, [pc, #308]	; (800104c <HAL_GPIO_Init+0x328>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x212>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4c      	ldr	r2, [pc, #304]	; (8001050 <HAL_GPIO_Init+0x32c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x20e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4b      	ldr	r2, [pc, #300]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x20a>
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	e00e      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f2e:	2308      	movs	r3, #8
 8000f30:	e00c      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f32:	2306      	movs	r3, #6
 8000f34:	e00a      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4935      	ldr	r1, [pc, #212]	; (8001034 <HAL_GPIO_Init+0x310>)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8e:	4a32      	ldr	r2, [pc, #200]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f94:	4b30      	ldr	r3, [pc, #192]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800100c:	4a12      	ldr	r2, [pc, #72]	; (8001058 <HAL_GPIO_Init+0x334>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	f67f ae90 	bls.w	8000d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40013800 	.word	0x40013800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
 8001044:	40020c00 	.word	0x40020c00
 8001048:	40021000 	.word	0x40021000
 800104c:	40021400 	.word	0x40021400
 8001050:	40021800 	.word	0x40021800
 8001054:	40021c00 	.word	0x40021c00
 8001058:	40013c00 	.word	0x40013c00

0800105c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	4013      	ands	r3, r2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e001      	b.n	800107e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c0:	b08f      	sub	sp, #60	; 0x3c
 80010c2:	af0a      	add	r7, sp, #40	; 0x28
 80010c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e10f      	b.n	80012f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f005 fe84 	bl	8006df8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 f96b 	bl	80033ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	687e      	ldr	r6, [r7, #4]
 800111c:	466d      	mov	r5, sp
 800111e:	f106 0410 	add.w	r4, r6, #16
 8001122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800112e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001132:	1d33      	adds	r3, r6, #4
 8001134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001136:	6838      	ldr	r0, [r7, #0]
 8001138:	f002 f842 	bl	80031c0 <USB_CoreInit>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2202      	movs	r2, #2
 8001146:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0d0      	b.n	80012f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f002 f959 	bl	800340c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e04a      	b.n	80011f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	333d      	adds	r3, #61	; 0x3d
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	333c      	adds	r3, #60	; 0x3c
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	b298      	uxth	r0, r3
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	3344      	adds	r3, #68	; 0x44
 800119c:	4602      	mov	r2, r0
 800119e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	3340      	adds	r3, #64	; 0x40
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	3348      	adds	r3, #72	; 0x48
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	334c      	adds	r3, #76	; 0x4c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	3354      	adds	r3, #84	; 0x54
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	3301      	adds	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3af      	bcc.n	8001160 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e044      	b.n	8001290 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4413      	add	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	3301      	adds	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3b5      	bcc.n	8001206 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	687e      	ldr	r6, [r7, #4]
 80012a2:	466d      	mov	r5, sp
 80012a4:	f106 0410 	add.w	r4, r6, #16
 80012a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80012b8:	1d33      	adds	r3, r6, #4
 80012ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f002 f8f1 	bl	80034a4 <USB_DevInit>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e00d      	b.n	80012f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fa40 	bl	800476e <USB_DevDisconnect>

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_PCD_Start+0x1c>
 8001310:	2302      	movs	r3, #2
 8001312:	e020      	b.n	8001356 <HAL_PCD_Start+0x5e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	2b01      	cmp	r3, #1
 8001322:	d109      	bne.n	8001338 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001328:	2b01      	cmp	r3, #1
 800132a:	d005      	beq.n	8001338 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001330:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f002 f843 	bl	80033c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f003 f9f0 	bl	800472c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800135e:	b590      	push	{r4, r7, lr}
 8001360:	b08d      	sub	sp, #52	; 0x34
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f003 faae 	bl	80048d6 <USB_GetMode>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	f040 848a 	bne.w	8001c96 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f003 fa12 	bl	80047b0 <USB_ReadInterrupts>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8480 	beq.w	8001c94 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 f9ff 	bl	80047b0 <USB_ReadInterrupts>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d107      	bne.n	80013cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f002 0202 	and.w	r2, r2, #2
 80013ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 f9ed 	bl	80047b0 <USB_ReadInterrupts>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2b10      	cmp	r3, #16
 80013de:	d161      	bne.n	80014a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0210 	bic.w	r2, r2, #16
 80013ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	f003 020f 	and.w	r2, r3, #15
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	3304      	adds	r3, #4
 800140e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	0c5b      	lsrs	r3, r3, #17
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	2b02      	cmp	r3, #2
 800141a:	d124      	bne.n	8001466 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d035      	beq.n	8001494 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001436:	b29b      	uxth	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	6a38      	ldr	r0, [r7, #32]
 800143c:	f003 f824 	bl	8004488 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144c:	441a      	add	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	6a1a      	ldr	r2, [r3, #32]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800145e:	441a      	add	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	621a      	str	r2, [r3, #32]
 8001464:	e016      	b.n	8001494 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	0c5b      	lsrs	r3, r3, #17
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	2b06      	cmp	r3, #6
 8001470:	d110      	bne.n	8001494 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001478:	2208      	movs	r2, #8
 800147a:	4619      	mov	r1, r3
 800147c:	6a38      	ldr	r0, [r7, #32]
 800147e:	f003 f803 	bl	8004488 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	6a1a      	ldr	r2, [r3, #32]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148e:	441a      	add	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0210 	orr.w	r2, r2, #16
 80014a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 f981 	bl	80047b0 <USB_ReadInterrupts>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014b8:	f040 80a7 	bne.w	800160a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 f986 	bl	80047d6 <USB_ReadDevAllOutEpInterrupt>
 80014ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014cc:	e099      	b.n	8001602 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 808e 	beq.w	80015f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 f9aa 	bl	800483e <USB_ReadDevOutEPInterrupt>
 80014ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00c      	beq.n	8001510 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	015a      	lsls	r2, r3, #5
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	4413      	add	r3, r2
 80014fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001502:	461a      	mov	r2, r3
 8001504:	2301      	movs	r3, #1
 8001506:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fec2 	bl	8002294 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00c      	beq.n	8001534 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	015a      	lsls	r2, r3, #5
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	4413      	add	r3, r2
 8001522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001526:	461a      	mov	r2, r3
 8001528:	2308      	movs	r3, #8
 800152a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800152c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 ff98 	bl	8002464 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	015a      	lsls	r2, r3, #5
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800154a:	461a      	mov	r2, r3
 800154c:	2310      	movs	r3, #16
 800154e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d030      	beq.n	80015bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001562:	2b80      	cmp	r3, #128	; 0x80
 8001564:	d109      	bne.n	800157a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001574:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001578:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800157a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	3304      	adds	r3, #4
 800158e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	78db      	ldrb	r3, [r3, #3]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2200      	movs	r2, #0
 800159c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f005 fd2d 	bl	8007004 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	015a      	lsls	r2, r3, #5
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b6:	461a      	mov	r2, r3
 80015b8:	2302      	movs	r3, #2
 80015ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0320 	and.w	r3, r3, #32
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	015a      	lsls	r2, r3, #5
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d2:	461a      	mov	r2, r3
 80015d4:	2320      	movs	r3, #32
 80015d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ee:	461a      	mov	r2, r3
 80015f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	3301      	adds	r3, #1
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	f47f af62 	bne.w	80014ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f003 f8ce 	bl	80047b0 <USB_ReadInterrupts>
 8001614:	4603      	mov	r3, r0
 8001616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800161e:	f040 80db 	bne.w	80017d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f003 f8ef 	bl	800480a <USB_ReadDevAllInEpInterrupt>
 800162c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001632:	e0cd      	b.n	80017d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80c2 	beq.w	80017c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f003 f915 	bl	800487a <USB_ReadDevInEPInterrupt>
 8001650:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d057      	beq.n	800170c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	2201      	movs	r2, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43db      	mvns	r3, r3
 8001676:	69f9      	ldr	r1, [r7, #28]
 8001678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800167c:	4013      	ands	r3, r2
 800167e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168c:	461a      	mov	r2, r3
 800168e:	2301      	movs	r3, #1
 8001690:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d132      	bne.n	8001700 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	334c      	adds	r3, #76	; 0x4c
 80016aa:	6819      	ldr	r1, [r3, #0]
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b0:	4613      	mov	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4403      	add	r3, r0
 80016ba:	3348      	adds	r3, #72	; 0x48
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4419      	add	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4403      	add	r3, r0
 80016ce:	334c      	adds	r3, #76	; 0x4c
 80016d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d113      	bne.n	8001700 <HAL_PCD_IRQHandler+0x3a2>
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	3354      	adds	r3, #84	; 0x54
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d108      	bne.n	8001700 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016f8:	461a      	mov	r2, r3
 80016fa:	2101      	movs	r1, #1
 80016fc:	f003 f91c 	bl	8004938 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4619      	mov	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f005 fbf7 	bl	8006efa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d008      	beq.n	8001728 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001722:	461a      	mov	r2, r3
 8001724:	2308      	movs	r3, #8
 8001726:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	d008      	beq.n	8001744 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800173e:	461a      	mov	r2, r3
 8001740:	2310      	movs	r3, #16
 8001742:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d008      	beq.n	8001760 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	015a      	lsls	r2, r3, #5
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	4413      	add	r3, r2
 8001756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800175a:	461a      	mov	r2, r3
 800175c:	2340      	movs	r3, #64	; 0x40
 800175e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d023      	beq.n	80017b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800176a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800176c:	6a38      	ldr	r0, [r7, #32]
 800176e:	f001 fffd 	bl	800376c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001774:	4613      	mov	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	3338      	adds	r3, #56	; 0x38
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	3304      	adds	r3, #4
 8001784:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	78db      	ldrb	r3, [r3, #3]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2200      	movs	r2, #0
 8001792:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4619      	mov	r1, r3
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f005 fc44 	bl	8007028 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ac:	461a      	mov	r2, r3
 80017ae:	2302      	movs	r3, #2
 80017b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fcdb 	bl	800217a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f af2e 	bne.w	8001634 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 ffe7 	bl	80047b0 <USB_ReadInterrupts>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017ec:	d122      	bne.n	8001834 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001808:	2b01      	cmp	r3, #1
 800180a:	d108      	bne.n	800181e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001814:	2100      	movs	r1, #0
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fec2 	bl	80025a0 <HAL_PCDEx_LPM_Callback>
 800181c:	e002      	b.n	8001824 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f005 fbe2 	bl	8006fe8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f002 ffb9 	bl	80047b0 <USB_ReadInterrupts>
 800183e:	4603      	mov	r3, r0
 8001840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001848:	d112      	bne.n	8001870 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d102      	bne.n	8001860 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f005 fb9e 	bl	8006f9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800186e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f002 ff9b 	bl	80047b0 <USB_ReadInterrupts>
 800187a:	4603      	mov	r3, r0
 800187c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001884:	f040 80b7 	bne.w	80019f6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2110      	movs	r1, #16
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 ff62 	bl	800376c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ac:	e046      	b.n	800193c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ba:	461a      	mov	r2, r3
 80018bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d2:	0151      	lsls	r1, r2, #5
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	440a      	add	r2, r1
 80018d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ee:	461a      	mov	r2, r3
 80018f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001906:	0151      	lsls	r1, r2, #5
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	440a      	add	r2, r1
 800190c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001910:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001914:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001926:	0151      	lsls	r1, r2, #5
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	440a      	add	r2, r1
 800192c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001930:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001934:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	3301      	adds	r3, #1
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001942:	429a      	cmp	r2, r3
 8001944:	d3b3      	bcc.n	80018ae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001954:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001958:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	2b00      	cmp	r3, #0
 8001960:	d016      	beq.n	8001990 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001972:	f043 030b 	orr.w	r3, r3, #11
 8001976:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001988:	f043 030b 	orr.w	r3, r3, #11
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	e015      	b.n	80019bc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800199e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b6:	f043 030b 	orr.w	r3, r3, #11
 80019ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019e0:	461a      	mov	r2, r3
 80019e2:	f002 ffa9 	bl	8004938 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fed8 	bl	80047b0 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a0a:	d124      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 ff6e 	bl	80048f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 ff23 	bl	8003866 <USB_GetDevSpeed>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681c      	ldr	r4, [r3, #0]
 8001a2c:	f001 f9e8 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8001a30:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f001 fc22 	bl	8003284 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f005 fa82 	bl	8006f4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fea8 	bl	80047b0 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d10a      	bne.n	8001a80 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f005 fa5f 	bl	8006f2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f002 0208 	and.w	r2, r2, #8
 8001a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fe93 	bl	80047b0 <USB_ReadInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a90:	2b80      	cmp	r3, #128	; 0x80
 8001a92:	d122      	bne.n	8001ada <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	e014      	b.n	8001ad0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	4613      	mov	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fb27 	bl	8002118 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	3301      	adds	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d3e5      	bcc.n	8001aa6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fe66 	bl	80047b0 <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aee:	d13b      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001af0:	2301      	movs	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
 8001af4:	e02b      	b.n	8001b4e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	3340      	adds	r3, #64	; 0x40
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d115      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da12      	bge.n	8001b48 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	333f      	adds	r3, #63	; 0x3f
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fae8 	bl	8002118 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3ce      	bcc.n	8001af6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fe1f 	bl	80047b0 <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b7c:	d155      	bne.n	8001c2a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b7e:	2301      	movs	r3, #1
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
 8001b82:	e045      	b.n	8001c10 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d12e      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	da2b      	bge.n	8001c0a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001bbe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d121      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10a      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c06:	6053      	str	r3, [r2, #4]
            break;
 8001c08:	e007      	b.n	8001c1a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3b4      	bcc.n	8001b84 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fdbe 	bl	80047b0 <USB_ReadInterrupts>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d10a      	bne.n	8001c56 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f005 fa03 	bl	800704c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fda8 	bl	80047b0 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d115      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f005 f9f3 	bl	8007068 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	e000      	b.n	8001c96 <HAL_PCD_IRQHandler+0x938>
      return;
 8001c94:	bf00      	nop
    }
  }
}
 8001c96:	3734      	adds	r7, #52	; 0x34
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}

08001c9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_PCD_SetAddress+0x1a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e013      	b.n	8001cde <HAL_PCD_SetAddress+0x42>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fd06 	bl	80046e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	4608      	mov	r0, r1
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	70fb      	strb	r3, [r7, #3]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	803b      	strh	r3, [r7, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da0f      	bge.n	8001d2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 020f 	and.w	r2, r3, #15
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	3338      	adds	r3, #56	; 0x38
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	705a      	strb	r2, [r3, #1]
 8001d2a:	e00f      	b.n	8001d4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	3304      	adds	r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d58:	883a      	ldrh	r2, [r7, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	78ba      	ldrb	r2, [r7, #2]
 8001d62:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d76:	78bb      	ldrb	r3, [r7, #2]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d102      	bne.n	8001d82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_PCD_EP_Open+0xaa>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e00e      	b.n	8001dae <HAL_PCD_EP_Open+0xc8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 fd86 	bl	80038b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001dac:	7afb      	ldrb	r3, [r7, #11]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da0f      	bge.n	8001dea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3338      	adds	r3, #56	; 0x38
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	3304      	adds	r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	705a      	strb	r2, [r3, #1]
 8001de8:	e00f      	b.n	8001e0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	3304      	adds	r3, #4
 8001e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_PCD_EP_Close+0x6e>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e00e      	b.n	8001e42 <HAL_PCD_EP_Close+0x8c>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68f9      	ldr	r1, [r7, #12]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 fdc4 	bl	80039c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	460b      	mov	r3, r1
 8001e58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
 8001e5c:	f003 020f 	and.w	r2, r3, #15
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6979      	ldr	r1, [r7, #20]
 8001ebe:	f002 f8a3 	bl	8004008 <USB_EP0StartXfer>
 8001ec2:	e008      	b.n	8001ed6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6979      	ldr	r1, [r7, #20]
 8001ed2:	f001 fe51 	bl	8003b78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 020f 	and.w	r2, r3, #15
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	f003 020f 	and.w	r2, r3, #15
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	3338      	adds	r3, #56	; 0x38
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	6979      	ldr	r1, [r7, #20]
 8001f82:	f002 f841 	bl	8004008 <USB_EP0StartXfer>
 8001f86:	e008      	b.n	8001f9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	6979      	ldr	r1, [r7, #20]
 8001f96:	f001 fdef 	bl	8003b78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d901      	bls.n	8001fc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e050      	b.n	8002064 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da0f      	bge.n	8001fea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 020f 	and.w	r2, r3, #15
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3338      	adds	r3, #56	; 0x38
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
 8001fe8:	e00d      	b.n	8002006 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_PCD_EP_SetStall+0x82>
 8002022:	2302      	movs	r3, #2
 8002024:	e01e      	b.n	8002064 <HAL_PCD_EP_SetStall+0xc0>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68f9      	ldr	r1, [r7, #12]
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fa7f 	bl	8004538 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	b2d9      	uxtb	r1, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002054:	461a      	mov	r2, r3
 8002056:	f002 fc6f 	bl	8004938 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 020f 	and.w	r2, r3, #15
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d901      	bls.n	800208a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e042      	b.n	8002110 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800208a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	da0f      	bge.n	80020b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 020f 	and.w	r2, r3, #15
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	3338      	adds	r3, #56	; 0x38
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	3304      	adds	r3, #4
 80020a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	705a      	strb	r2, [r3, #1]
 80020b0:	e00f      	b.n	80020d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f003 020f 	and.w	r2, r3, #15
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	3304      	adds	r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_PCD_EP_ClrStall+0x86>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e00e      	b.n	8002110 <HAL_PCD_EP_ClrStall+0xa4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68f9      	ldr	r1, [r7, #12]
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fa87 	bl	8004614 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002128:	2b00      	cmp	r3, #0
 800212a:	da0c      	bge.n	8002146 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 020f 	and.w	r2, r3, #15
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	3338      	adds	r3, #56	; 0x38
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	3304      	adds	r3, #4
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e00c      	b.n	8002160 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 020f 	and.w	r2, r3, #15
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	f002 f8a6 	bl	80042b8 <USB_EPStopXfer>
 800216c:	4603      	mov	r3, r0
 800216e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002170:	7afb      	ldrb	r3, [r7, #11]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b08a      	sub	sp, #40	; 0x28
 800217e:	af02      	add	r7, sp, #8
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	3338      	adds	r3, #56	; 0x38
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	3304      	adds	r3, #4
 80021a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a1a      	ldr	r2, [r3, #32]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d901      	bls.n	80021b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e06c      	b.n	800228c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d902      	bls.n	80021ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3303      	adds	r3, #3
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021d6:	e02b      	b.n	8002230 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	699a      	ldr	r2, [r3, #24]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d902      	bls.n	80021f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	3303      	adds	r3, #3
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6919      	ldr	r1, [r3, #16]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800220c:	b2db      	uxtb	r3, r3
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	4603      	mov	r3, r0
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f002 f8fa 	bl	800440c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	441a      	add	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	441a      	add	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	b29b      	uxth	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	429a      	cmp	r2, r3
 8002244:	d809      	bhi.n	800225a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800224e:	429a      	cmp	r2, r3
 8002250:	d203      	bcs.n	800225a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1be      	bne.n	80021d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	429a      	cmp	r2, r3
 8002264:	d811      	bhi.n	800228a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	2201      	movs	r2, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	43db      	mvns	r3, r3
 8002280:	6939      	ldr	r1, [r7, #16]
 8002282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002286:	4013      	ands	r3, r2
 8002288:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	333c      	adds	r3, #60	; 0x3c
 80022ac:	3304      	adds	r3, #4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d17b      	bne.n	80023c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4a61      	ldr	r2, [pc, #388]	; (800245c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	f240 80b9 	bls.w	8002450 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80b3 	beq.w	8002450 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f6:	461a      	mov	r2, r3
 80022f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022fc:	6093      	str	r3, [r2, #8]
 80022fe:	e0a7      	b.n	8002450 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	461a      	mov	r2, r3
 8002318:	2320      	movs	r3, #32
 800231a:	6093      	str	r3, [r2, #8]
 800231c:	e098      	b.n	8002450 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 8093 	bne.w	8002450 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	4a4b      	ldr	r2, [pc, #300]	; (800245c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d90f      	bls.n	8002352 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002348:	461a      	mov	r2, r3
 800234a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234e:	6093      	str	r3, [r2, #8]
 8002350:	e07e      	b.n	8002450 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	3304      	adds	r3, #4
 8002366:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	0159      	lsls	r1, r3, #5
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	440b      	add	r3, r1
 8002374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237e:	1ad2      	subs	r2, r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d114      	bne.n	80023b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800239c:	461a      	mov	r2, r3
 800239e:	2101      	movs	r1, #1
 80023a0:	f002 faca 	bl	8004938 <USB_EP0_OutStart>
 80023a4:	e006      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	441a      	add	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f004 fd82 	bl	8006ec4 <HAL_PCD_DataOutStageCallback>
 80023c0:	e046      	b.n	8002450 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4a26      	ldr	r2, [pc, #152]	; (8002460 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d124      	bne.n	8002414 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e0:	461a      	mov	r2, r3
 80023e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e6:	6093      	str	r3, [r2, #8]
 80023e8:	e032      	b.n	8002450 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002400:	461a      	mov	r2, r3
 8002402:	2320      	movs	r3, #32
 8002404:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	4619      	mov	r1, r3
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f004 fd59 	bl	8006ec4 <HAL_PCD_DataOutStageCallback>
 8002412:	e01d      	b.n	8002450 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d114      	bne.n	8002444 <PCD_EP_OutXfrComplete_int+0x1b0>
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d108      	bne.n	8002444 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800243c:	461a      	mov	r2, r3
 800243e:	2100      	movs	r1, #0
 8002440:	f002 fa7a 	bl	8004938 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f004 fd3a 	bl	8006ec4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	4f54300a 	.word	0x4f54300a
 8002460:	4f54310a 	.word	0x4f54310a

08002464 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	333c      	adds	r3, #60	; 0x3c
 800247c:	3304      	adds	r3, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <PCD_EP_OutSetupPacket_int+0x88>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d90e      	bls.n	80024b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b0:	461a      	mov	r2, r3
 80024b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f004 fcf1 	bl	8006ea0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <PCD_EP_OutSetupPacket_int+0x88>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d90c      	bls.n	80024e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d108      	bne.n	80024e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024d8:	461a      	mov	r2, r3
 80024da:	2101      	movs	r1, #1
 80024dc:	f002 fa2c 	bl	8004938 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	4f54300a 	.word	0x4f54300a

080024f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
 80024fc:	4613      	mov	r3, r2
 80024fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800250e:	883b      	ldrh	r3, [r7, #0]
 8002510:	0419      	lsls	r1, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	430a      	orrs	r2, r1
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
 800251c:	e028      	b.n	8002570 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4413      	add	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e00d      	b.n	800254e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	3340      	adds	r3, #64	; 0x40
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4413      	add	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	3301      	adds	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	3b01      	subs	r3, #1
 8002554:	429a      	cmp	r2, r3
 8002556:	d3ec      	bcc.n	8002532 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002558:	883b      	ldrh	r3, [r7, #0]
 800255a:	0418      	lsls	r0, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	3b01      	subs	r3, #1
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	4302      	orrs	r2, r0
 8002568:	3340      	adds	r3, #64	; 0x40
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e267      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d075      	beq.n	80026c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d6:	4b88      	ldr	r3, [pc, #544]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d00c      	beq.n	80025fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e2:	4b85      	ldr	r3, [pc, #532]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d112      	bne.n	8002614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ee:	4b82      	ldr	r3, [pc, #520]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025fa:	d10b      	bne.n	8002614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	4b7e      	ldr	r3, [pc, #504]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d05b      	beq.n	80026c0 <HAL_RCC_OscConfig+0x108>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d157      	bne.n	80026c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e242      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d106      	bne.n	800262c <HAL_RCC_OscConfig+0x74>
 800261e:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a75      	ldr	r2, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e01d      	b.n	8002668 <HAL_RCC_OscConfig+0xb0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x98>
 8002636:	4b70      	ldr	r3, [pc, #448]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a6f      	ldr	r2, [pc, #444]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6c      	ldr	r2, [pc, #432]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0xb0>
 8002650:	4b69      	ldr	r3, [pc, #420]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a68      	ldr	r2, [pc, #416]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a65      	ldr	r2, [pc, #404]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe f9fa 	bl	8000a68 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f7fe f9f6 	bl	8000a68 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e207      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b5b      	ldr	r3, [pc, #364]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0xc0>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe f9e6 	bl	8000a68 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a0:	f7fe f9e2 	bl	8000a68 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1f3      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	4b51      	ldr	r3, [pc, #324]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0xe8>
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d063      	beq.n	8002796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d11c      	bne.n	8002720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b44      	ldr	r3, [pc, #272]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d116      	bne.n	8002720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x152>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1c7      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4937      	ldr	r1, [pc, #220]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	e03a      	b.n	8002796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002728:	4b34      	ldr	r3, [pc, #208]	; (80027fc <HAL_RCC_OscConfig+0x244>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe f99b 	bl	8000a68 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe f997 	bl	8000a68 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e1a8      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4925      	ldr	r1, [pc, #148]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	e015      	b.n	8002796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_RCC_OscConfig+0x244>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe f97a 	bl	8000a68 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002778:	f7fe f976 	bl	8000a68 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e187      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d036      	beq.n	8002810 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d016      	beq.n	80027d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_RCC_OscConfig+0x248>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe f95a 	bl	8000a68 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe f956 	bl	8000a68 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e167      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_OscConfig+0x240>)
 80027cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x200>
 80027d6:	e01b      	b.n	8002810 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_OscConfig+0x248>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027de:	f7fe f943 	bl	8000a68 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	e00e      	b.n	8002804 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e6:	f7fe f93f 	bl	8000a68 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d907      	bls.n	8002804 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e150      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
 80027f8:	40023800 	.word	0x40023800
 80027fc:	42470000 	.word	0x42470000
 8002800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	4b88      	ldr	r3, [pc, #544]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ea      	bne.n	80027e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8097 	beq.w	800294c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002822:	4b81      	ldr	r3, [pc, #516]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b7d      	ldr	r3, [pc, #500]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4a7c      	ldr	r2, [pc, #496]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
 800283e:	4b7a      	ldr	r3, [pc, #488]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	4b77      	ldr	r3, [pc, #476]	; (8002a2c <HAL_RCC_OscConfig+0x474>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d118      	bne.n	800288c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285a:	4b74      	ldr	r3, [pc, #464]	; (8002a2c <HAL_RCC_OscConfig+0x474>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a73      	ldr	r2, [pc, #460]	; (8002a2c <HAL_RCC_OscConfig+0x474>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7fe f8ff 	bl	8000a68 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286e:	f7fe f8fb 	bl	8000a68 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e10c      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <HAL_RCC_OscConfig+0x474>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_OscConfig+0x2ea>
 8002894:	4b64      	ldr	r3, [pc, #400]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4a63      	ldr	r2, [pc, #396]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6713      	str	r3, [r2, #112]	; 0x70
 80028a0:	e01c      	b.n	80028dc <HAL_RCC_OscConfig+0x324>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x30c>
 80028aa:	4b5f      	ldr	r3, [pc, #380]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	4a5e      	ldr	r2, [pc, #376]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
 80028b6:	4b5c      	ldr	r3, [pc, #368]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a5b      	ldr	r2, [pc, #364]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0x324>
 80028c4:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a57      	ldr	r2, [pc, #348]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
 80028d0:	4b55      	ldr	r3, [pc, #340]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a54      	ldr	r2, [pc, #336]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 80028d6:	f023 0304 	bic.w	r3, r3, #4
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe f8c0 	bl	8000a68 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe f8bc 	bl	8000a68 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0cb      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	4b49      	ldr	r3, [pc, #292]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0ee      	beq.n	80028ec <HAL_RCC_OscConfig+0x334>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002910:	f7fe f8aa 	bl	8000a68 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002916:	e00a      	b.n	800292e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002918:	f7fe f8a6 	bl	8000a68 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e0b5      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292e:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ee      	bne.n	8002918 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002940:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	4a38      	ldr	r2, [pc, #224]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80a1 	beq.w	8002a98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002956:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b08      	cmp	r3, #8
 8002960:	d05c      	beq.n	8002a1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d141      	bne.n	80029ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCC_OscConfig+0x478>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe f87a 	bl	8000a68 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe f876 	bl	8000a68 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e087      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	019b      	lsls	r3, r3, #6
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	3b01      	subs	r3, #1
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	061b      	lsls	r3, r3, #24
 80029ba:	491b      	ldr	r1, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCC_OscConfig+0x478>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fe f84f 	bl	8000a68 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe f84b 	bl	8000a68 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e05c      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x416>
 80029ec:	e054      	b.n	8002a98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <HAL_RCC_OscConfig+0x478>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe f838 	bl	8000a68 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe f834 	bl	8000a68 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e045      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_OscConfig+0x470>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x444>
 8002a1a:	e03d      	b.n	8002a98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e038      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_RCC_OscConfig+0x4ec>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d028      	beq.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d121      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d11a      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d111      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0cc      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002abc:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d90c      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0b8      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b50      	ldr	r3, [pc, #320]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	494d      	ldr	r1, [pc, #308]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d044      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d119      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b66:	4b3f      	ldr	r3, [pc, #252]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e06f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b76:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e067      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b86:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f023 0203 	bic.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4934      	ldr	r1, [pc, #208]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b98:	f7fd ff66 	bl	8000a68 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba0:	f7fd ff62 	bl	8000a68 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e04f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 020c 	and.w	r2, r3, #12
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1eb      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d20c      	bcs.n	8002bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e032      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4916      	ldr	r1, [pc, #88]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	490e      	ldr	r1, [pc, #56]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c2e:	f000 f821 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c32:	4602      	mov	r2, r0
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	490a      	ldr	r1, [pc, #40]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	5ccb      	ldrb	r3, [r1, r3]
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fec6 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023c00 	.word	0x40023c00
 8002c64:	40023800 	.word	0x40023800
 8002c68:	080074ec 	.word	0x080074ec
 8002c6c:	20000004 	.word	0x20000004
 8002c70:	20000008 	.word	0x20000008

08002c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c78:	b090      	sub	sp, #64	; 0x40
 8002c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c80:	2300      	movs	r3, #0
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c84:	2300      	movs	r3, #0
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c8c:	4b59      	ldr	r3, [pc, #356]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d00d      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	f200 80a1 	bhi.w	8002de0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x3a>
 8002ca6:	e09b      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cac:	e09b      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cae:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cb2:	e098      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cb4:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cbe:	4b4d      	ldr	r3, [pc, #308]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d028      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cca:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	099b      	lsrs	r3, r3, #6
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	623b      	str	r3, [r7, #32]
 8002cd4:	627a      	str	r2, [r7, #36]	; 0x24
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce0:	fb03 f201 	mul.w	r2, r3, r1
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	4a43      	ldr	r2, [pc, #268]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002cee:	fba0 1202 	umull	r1, r2, r0, r2
 8002cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cf4:	460a      	mov	r2, r1
 8002cf6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfa:	4413      	add	r3, r2
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d00:	2200      	movs	r2, #0
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	61fa      	str	r2, [r7, #28]
 8002d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d0e:	f7fd fa5b 	bl	80001c8 <__aeabi_uldivmod>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4613      	mov	r3, r2
 8002d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d1a:	e053      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1c:	4b35      	ldr	r3, [pc, #212]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	099b      	lsrs	r3, r3, #6
 8002d22:	2200      	movs	r2, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	617a      	str	r2, [r7, #20]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d2e:	f04f 0b00 	mov.w	fp, #0
 8002d32:	4652      	mov	r2, sl
 8002d34:	465b      	mov	r3, fp
 8002d36:	f04f 0000 	mov.w	r0, #0
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	0159      	lsls	r1, r3, #5
 8002d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d44:	0150      	lsls	r0, r2, #5
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d66:	ebb2 0408 	subs.w	r4, r2, r8
 8002d6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	00eb      	lsls	r3, r5, #3
 8002d78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d7c:	00e2      	lsls	r2, r4, #3
 8002d7e:	4614      	mov	r4, r2
 8002d80:	461d      	mov	r5, r3
 8002d82:	eb14 030a 	adds.w	r3, r4, sl
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	eb45 030b 	adc.w	r3, r5, fp
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	028b      	lsls	r3, r1, #10
 8002d9e:	4621      	mov	r1, r4
 8002da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002da4:	4621      	mov	r1, r4
 8002da6:	028a      	lsls	r2, r1, #10
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dae:	2200      	movs	r2, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	60fa      	str	r2, [r7, #12]
 8002db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002db8:	f7fd fa06 	bl	80001c8 <__aeabi_uldivmod>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	0c1b      	lsrs	r3, r3, #16
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dde:	e002      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3740      	adds	r7, #64	; 0x40
 8002dec:	46bd      	mov	sp, r7
 8002dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	017d7840 	.word	0x017d7840

08002e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e041      	b.n	8002eae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fd fcf4 	bl	800082c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f000 f896 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d001      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e046      	b.n	8002f5e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <HAL_TIM_Base_Start+0xb4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d022      	beq.n	8002f28 <HAL_TIM_Base_Start+0x70>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eea:	d01d      	beq.n	8002f28 <HAL_TIM_Base_Start+0x70>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <HAL_TIM_Base_Start+0xb8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d018      	beq.n	8002f28 <HAL_TIM_Base_Start+0x70>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <HAL_TIM_Base_Start+0xbc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <HAL_TIM_Base_Start+0x70>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <HAL_TIM_Base_Start+0xc0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00e      	beq.n	8002f28 <HAL_TIM_Base_Start+0x70>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <HAL_TIM_Base_Start+0xc4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d009      	beq.n	8002f28 <HAL_TIM_Base_Start+0x70>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_TIM_Base_Start+0xc8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <HAL_TIM_Base_Start+0x70>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <HAL_TIM_Base_Start+0xcc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d111      	bne.n	8002f4c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d010      	beq.n	8002f5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	e007      	b.n	8002f5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800
 8002f78:	40000c00 	.word	0x40000c00
 8002f7c:	40010400 	.word	0x40010400
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40001800 	.word	0x40001800

08002f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a40      	ldr	r2, [pc, #256]	; (800309c <TIM_Base_SetConfig+0x114>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d00f      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a3d      	ldr	r2, [pc, #244]	; (80030a0 <TIM_Base_SetConfig+0x118>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00b      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <TIM_Base_SetConfig+0x11c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d007      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a3b      	ldr	r2, [pc, #236]	; (80030a8 <TIM_Base_SetConfig+0x120>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d003      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <TIM_Base_SetConfig+0x124>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d108      	bne.n	8002fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a2f      	ldr	r2, [pc, #188]	; (800309c <TIM_Base_SetConfig+0x114>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d02b      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d027      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a2c      	ldr	r2, [pc, #176]	; (80030a0 <TIM_Base_SetConfig+0x118>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d023      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <TIM_Base_SetConfig+0x11c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01f      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <TIM_Base_SetConfig+0x120>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01b      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a29      	ldr	r2, [pc, #164]	; (80030ac <TIM_Base_SetConfig+0x124>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d017      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <TIM_Base_SetConfig+0x128>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <TIM_Base_SetConfig+0x12c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00f      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <TIM_Base_SetConfig+0x130>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00b      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a25      	ldr	r2, [pc, #148]	; (80030bc <TIM_Base_SetConfig+0x134>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a24      	ldr	r2, [pc, #144]	; (80030c0 <TIM_Base_SetConfig+0x138>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d003      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a23      	ldr	r2, [pc, #140]	; (80030c4 <TIM_Base_SetConfig+0x13c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d108      	bne.n	800304c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <TIM_Base_SetConfig+0x114>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_Base_SetConfig+0xf8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <TIM_Base_SetConfig+0x124>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	615a      	str	r2, [r3, #20]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40010400 	.word	0x40010400
 80030b0:	40014000 	.word	0x40014000
 80030b4:	40014400 	.word	0x40014400
 80030b8:	40014800 	.word	0x40014800
 80030bc:	40001800 	.word	0x40001800
 80030c0:	40001c00 	.word	0x40001c00
 80030c4:	40002000 	.word	0x40002000

080030c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030dc:	2302      	movs	r3, #2
 80030de:	e05a      	b.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a21      	ldr	r2, [pc, #132]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312c:	d01d      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d018      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1a      	ldr	r2, [pc, #104]	; (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10c      	bne.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	4313      	orrs	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40010400 	.word	0x40010400
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40001800 	.word	0x40001800

080031c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031c0:	b084      	sub	sp, #16
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	f107 001c 	add.w	r0, r7, #28
 80031ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d122      	bne.n	800321e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80031ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003202:	2b01      	cmp	r3, #1
 8003204:	d105      	bne.n	8003212 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f001 fbee 	bl	80049f4 <USB_CoreReset>
 8003218:	4603      	mov	r3, r0
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	e01a      	b.n	8003254 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f001 fbe2 	bl	80049f4 <USB_CoreReset>
 8003230:	4603      	mov	r3, r0
 8003232:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	639a      	str	r2, [r3, #56]	; 0x38
 8003246:	e005      	b.n	8003254 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	2b01      	cmp	r3, #1
 8003258:	d10b      	bne.n	8003272 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f043 0206 	orr.w	r2, r3, #6
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800327e:	b004      	add	sp, #16
 8003280:	4770      	bx	lr
	...

08003284 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d165      	bne.n	8003364 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4a41      	ldr	r2, [pc, #260]	; (80033a0 <USB_SetTurnaroundTime+0x11c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d906      	bls.n	80032ae <USB_SetTurnaroundTime+0x2a>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <USB_SetTurnaroundTime+0x120>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d202      	bcs.n	80032ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80032a8:	230f      	movs	r3, #15
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	e062      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <USB_SetTurnaroundTime+0x120>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d306      	bcc.n	80032c4 <USB_SetTurnaroundTime+0x40>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <USB_SetTurnaroundTime+0x124>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d202      	bcs.n	80032c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80032be:	230e      	movs	r3, #14
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e057      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4a38      	ldr	r2, [pc, #224]	; (80033a8 <USB_SetTurnaroundTime+0x124>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d306      	bcc.n	80032da <USB_SetTurnaroundTime+0x56>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4a37      	ldr	r2, [pc, #220]	; (80033ac <USB_SetTurnaroundTime+0x128>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d202      	bcs.n	80032da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80032d4:	230d      	movs	r3, #13
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	e04c      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4a33      	ldr	r2, [pc, #204]	; (80033ac <USB_SetTurnaroundTime+0x128>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d306      	bcc.n	80032f0 <USB_SetTurnaroundTime+0x6c>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	4a32      	ldr	r2, [pc, #200]	; (80033b0 <USB_SetTurnaroundTime+0x12c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d802      	bhi.n	80032f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80032ea:	230c      	movs	r3, #12
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	e041      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4a2f      	ldr	r2, [pc, #188]	; (80033b0 <USB_SetTurnaroundTime+0x12c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d906      	bls.n	8003306 <USB_SetTurnaroundTime+0x82>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4a2e      	ldr	r2, [pc, #184]	; (80033b4 <USB_SetTurnaroundTime+0x130>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d802      	bhi.n	8003306 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003300:	230b      	movs	r3, #11
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	e036      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4a2a      	ldr	r2, [pc, #168]	; (80033b4 <USB_SetTurnaroundTime+0x130>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d906      	bls.n	800331c <USB_SetTurnaroundTime+0x98>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <USB_SetTurnaroundTime+0x134>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d802      	bhi.n	800331c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003316:	230a      	movs	r3, #10
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e02b      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <USB_SetTurnaroundTime+0x134>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d906      	bls.n	8003332 <USB_SetTurnaroundTime+0xae>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4a25      	ldr	r2, [pc, #148]	; (80033bc <USB_SetTurnaroundTime+0x138>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d202      	bcs.n	8003332 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800332c:	2309      	movs	r3, #9
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e020      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4a21      	ldr	r2, [pc, #132]	; (80033bc <USB_SetTurnaroundTime+0x138>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d306      	bcc.n	8003348 <USB_SetTurnaroundTime+0xc4>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4a20      	ldr	r2, [pc, #128]	; (80033c0 <USB_SetTurnaroundTime+0x13c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d802      	bhi.n	8003348 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003342:	2308      	movs	r3, #8
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e015      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <USB_SetTurnaroundTime+0x13c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d906      	bls.n	800335e <USB_SetTurnaroundTime+0xda>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <USB_SetTurnaroundTime+0x140>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d202      	bcs.n	800335e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003358:	2307      	movs	r3, #7
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e00a      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800335e:	2306      	movs	r3, #6
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e007      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800336a:	2309      	movs	r3, #9
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	e001      	b.n	8003374 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003370:	2309      	movs	r3, #9
 8003372:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	029b      	lsls	r3, r3, #10
 8003388:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800338c:	431a      	orrs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	00d8acbf 	.word	0x00d8acbf
 80033a4:	00e4e1c0 	.word	0x00e4e1c0
 80033a8:	00f42400 	.word	0x00f42400
 80033ac:	01067380 	.word	0x01067380
 80033b0:	011a499f 	.word	0x011a499f
 80033b4:	01312cff 	.word	0x01312cff
 80033b8:	014ca43f 	.word	0x014ca43f
 80033bc:	016e3600 	.word	0x016e3600
 80033c0:	01a6ab1f 	.word	0x01a6ab1f
 80033c4:	01e84800 	.word	0x01e84800

080033c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0201 	bic.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d115      	bne.n	800345a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800343a:	2001      	movs	r0, #1
 800343c:	f7fd fb20 	bl	8000a80 <HAL_Delay>
      ms++;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f001 fa45 	bl	80048d6 <USB_GetMode>
 800344c:	4603      	mov	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d01e      	beq.n	8003490 <USB_SetCurrentMode+0x84>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b31      	cmp	r3, #49	; 0x31
 8003456:	d9f0      	bls.n	800343a <USB_SetCurrentMode+0x2e>
 8003458:	e01a      	b.n	8003490 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d115      	bne.n	800348c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800346c:	2001      	movs	r0, #1
 800346e:	f7fd fb07 	bl	8000a80 <HAL_Delay>
      ms++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3301      	adds	r3, #1
 8003476:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f001 fa2c 	bl	80048d6 <USB_GetMode>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <USB_SetCurrentMode+0x84>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b31      	cmp	r3, #49	; 0x31
 8003488:	d9f0      	bls.n	800346c <USB_SetCurrentMode+0x60>
 800348a:	e001      	b.n	8003490 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e005      	b.n	800349c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b32      	cmp	r3, #50	; 0x32
 8003494:	d101      	bne.n	800349a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034a4:	b084      	sub	sp, #16
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80034b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	e009      	b.n	80034d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	3340      	adds	r3, #64	; 0x40
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	2200      	movs	r2, #0
 80034d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	3301      	adds	r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b0e      	cmp	r3, #14
 80034dc:	d9f2      	bls.n	80034c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d11c      	bne.n	800351e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f2:	f043 0302 	orr.w	r3, r3, #2
 80034f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
 800351c:	e00b      	b.n	8003536 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800353c:	461a      	mov	r2, r3
 800353e:	2300      	movs	r3, #0
 8003540:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003548:	4619      	mov	r1, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003550:	461a      	mov	r2, r3
 8003552:	680b      	ldr	r3, [r1, #0]
 8003554:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10c      	bne.n	8003576 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d104      	bne.n	800356c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003562:	2100      	movs	r1, #0
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f965 	bl	8003834 <USB_SetDevSpeed>
 800356a:	e008      	b.n	800357e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800356c:	2101      	movs	r1, #1
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f960 	bl	8003834 <USB_SetDevSpeed>
 8003574:	e003      	b.n	800357e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003576:	2103      	movs	r1, #3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f95b 	bl	8003834 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800357e:	2110      	movs	r1, #16
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f8f3 	bl	800376c <USB_FlushTxFifo>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f91f 	bl	80037d4 <USB_FlushRxFifo>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a6:	461a      	mov	r2, r3
 80035a8:	2300      	movs	r3, #0
 80035aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b2:	461a      	mov	r2, r3
 80035b4:	2300      	movs	r3, #0
 80035b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035be:	461a      	mov	r2, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e043      	b.n	8003652 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035e0:	d118      	bne.n	8003614 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f4:	461a      	mov	r2, r3
 80035f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	e013      	b.n	8003626 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360a:	461a      	mov	r2, r3
 800360c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e008      	b.n	8003626 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003620:	461a      	mov	r2, r3
 8003622:	2300      	movs	r3, #0
 8003624:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003632:	461a      	mov	r2, r3
 8003634:	2300      	movs	r3, #0
 8003636:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003644:	461a      	mov	r2, r3
 8003646:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800364a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	3301      	adds	r3, #1
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	429a      	cmp	r2, r3
 8003658:	d3b7      	bcc.n	80035ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	e043      	b.n	80036e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003676:	d118      	bne.n	80036aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e013      	b.n	80036bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	e008      	b.n	80036bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b6:	461a      	mov	r2, r3
 80036b8:	2300      	movs	r3, #0
 80036ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c8:	461a      	mov	r2, r3
 80036ca:	2300      	movs	r3, #0
 80036cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036da:	461a      	mov	r2, r3
 80036dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	3301      	adds	r3, #1
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d3b7      	bcc.n	8003660 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003702:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003710:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	2b00      	cmp	r3, #0
 8003716:	d105      	bne.n	8003724 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f043 0210 	orr.w	r2, r3, #16
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <USB_DevInit+0x2c4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f043 0208 	orr.w	r2, r3, #8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d107      	bne.n	8003758 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003764:	b004      	add	sp, #16
 8003766:	4770      	bx	lr
 8003768:	803c3800 	.word	0x803c3800

0800376c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3301      	adds	r3, #1
 800377e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <USB_FlushTxFifo+0x64>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d901      	bls.n	800378c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e01b      	b.n	80037c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	daf2      	bge.n	800377a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	019b      	lsls	r3, r3, #6
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3301      	adds	r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a08      	ldr	r2, [pc, #32]	; (80037d0 <USB_FlushTxFifo+0x64>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e006      	b.n	80037c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d0f0      	beq.n	80037a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	00030d40 	.word	0x00030d40

080037d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3301      	adds	r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a11      	ldr	r2, [pc, #68]	; (8003830 <USB_FlushRxFifo+0x5c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e018      	b.n	8003824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	daf2      	bge.n	80037e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2210      	movs	r2, #16
 8003802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3301      	adds	r3, #1
 8003808:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a08      	ldr	r2, [pc, #32]	; (8003830 <USB_FlushRxFifo+0x5c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e006      	b.n	8003824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b10      	cmp	r3, #16
 8003820:	d0f0      	beq.n	8003804 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	00030d40 	.word	0x00030d40

08003834 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	68f9      	ldr	r1, [r7, #12]
 8003850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003866:	b480      	push	{r7}
 8003868:	b087      	sub	sp, #28
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0306 	and.w	r3, r3, #6
 800387e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003886:	2300      	movs	r3, #0
 8003888:	75fb      	strb	r3, [r7, #23]
 800388a:	e00a      	b.n	80038a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d002      	beq.n	8003898 <USB_GetDevSpeed+0x32>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b06      	cmp	r3, #6
 8003896:	d102      	bne.n	800389e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003898:	2302      	movs	r3, #2
 800389a:	75fb      	strb	r3, [r7, #23]
 800389c:	e001      	b.n	80038a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800389e:	230f      	movs	r3, #15
 80038a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	785b      	ldrb	r3, [r3, #1]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d13a      	bne.n	8003942 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	2101      	movs	r1, #1
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	68f9      	ldr	r1, [r7, #12]
 80038e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d155      	bne.n	80039b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	791b      	ldrb	r3, [r3, #4]
 800391e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003920:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	059b      	lsls	r3, r3, #22
 8003926:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003928:	4313      	orrs	r3, r2
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	0151      	lsls	r1, r2, #5
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	440a      	add	r2, r1
 8003932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	e036      	b.n	80039b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	2101      	movs	r1, #1
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003960:	4313      	orrs	r3, r2
 8003962:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11a      	bne.n	80039b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	791b      	ldrb	r3, [r3, #4]
 8003994:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003996:	430b      	orrs	r3, r1
 8003998:	4313      	orrs	r3, r2
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	785b      	ldrb	r3, [r3, #1]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d161      	bne.n	8003aa0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039f2:	d11f      	bne.n	8003a34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	0151      	lsls	r1, r2, #5
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	440a      	add	r2, r1
 8003a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	0151      	lsls	r1, r2, #5
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	440a      	add	r2, r1
 8003a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	68f9      	ldr	r1, [r7, #12]
 8003a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a54:	4013      	ands	r3, r2
 8003a56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	2101      	movs	r1, #1
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	0159      	lsls	r1, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	440b      	add	r3, r1
 8003a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a96:	4619      	mov	r1, r3
 8003a98:	4b35      	ldr	r3, [pc, #212]	; (8003b70 <USB_DeactivateEndpoint+0x1b0>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]
 8003a9e:	e060      	b.n	8003b62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ab6:	d11f      	bne.n	8003af8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	0151      	lsls	r1, r2, #5
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	440a      	add	r2, r1
 8003ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ad6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003af6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	43db      	mvns	r3, r3
 8003b12:	68f9      	ldr	r1, [r7, #12]
 8003b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b18:	4013      	ands	r3, r2
 8003b1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	43db      	mvns	r3, r3
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	0159      	lsls	r1, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	440b      	add	r3, r1
 8003b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <USB_DeactivateEndpoint+0x1b4>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	ec337800 	.word	0xec337800
 8003b74:	eff37800 	.word	0xeff37800

08003b78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	4613      	mov	r3, r2
 8003b84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	f040 815c 	bne.w	8003e52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d132      	bne.n	8003c08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003be4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c00:	0cdb      	lsrs	r3, r3, #19
 8003c02:	04db      	lsls	r3, r3, #19
 8003c04:	6113      	str	r3, [r2, #16]
 8003c06:	e074      	b.n	8003cf2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	0151      	lsls	r1, r2, #5
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c22:	0cdb      	lsrs	r3, r3, #19
 8003c24:	04db      	lsls	r3, r3, #19
 8003c26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c58:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6999      	ldr	r1, [r3, #24]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	440b      	add	r3, r1
 8003c64:	1e59      	subs	r1, r3, #1
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c6e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c70:	4b9d      	ldr	r3, [pc, #628]	; (8003ee8 <USB_EPStartXfer+0x370>)
 8003c72:	400b      	ands	r3, r1
 8003c74:	69b9      	ldr	r1, [r7, #24]
 8003c76:	0148      	lsls	r0, r1, #5
 8003c78:	69f9      	ldr	r1, [r7, #28]
 8003c7a:	4401      	add	r1, r0
 8003c7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c80:	4313      	orrs	r3, r2
 8003c82:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9a:	69b9      	ldr	r1, [r7, #24]
 8003c9c:	0148      	lsls	r0, r1, #5
 8003c9e:	69f9      	ldr	r1, [r7, #28]
 8003ca0:	4401      	add	r1, r0
 8003ca2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	791b      	ldrb	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d11f      	bne.n	8003cf2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ccc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003cd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cf0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d14b      	bne.n	8003d90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	791b      	ldrb	r3, [r3, #4]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d128      	bne.n	8003d6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d110      	bne.n	8003d4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e00f      	b.n	8003d6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	0151      	lsls	r1, r2, #5
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	440a      	add	r2, r1
 8003d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	0151      	lsls	r1, r2, #5
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	440a      	add	r2, r1
 8003d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e133      	b.n	8003ff8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	0151      	lsls	r1, r2, #5
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	440a      	add	r2, r1
 8003da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003daa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	791b      	ldrb	r3, [r3, #4]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d015      	beq.n	8003de4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 811b 	beq.w	8003ff8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	69f9      	ldr	r1, [r7, #28]
 8003dda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dde:	4313      	orrs	r3, r2
 8003de0:	634b      	str	r3, [r1, #52]	; 0x34
 8003de2:	e109      	b.n	8003ff8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d110      	bne.n	8003e16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e00f      	b.n	8003e36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	0151      	lsls	r1, r2, #5
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	440a      	add	r2, r1
 8003e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	6919      	ldr	r1, [r3, #16]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	b298      	uxth	r0, r3
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	4603      	mov	r3, r0
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fade 	bl	800440c <USB_WritePacket>
 8003e50:	e0d2      	b.n	8003ff8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e6c:	0cdb      	lsrs	r3, r3, #19
 8003e6e:	04db      	lsls	r3, r3, #19
 8003e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d126      	bne.n	8003eec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb4:	69b9      	ldr	r1, [r7, #24]
 8003eb6:	0148      	lsls	r0, r1, #5
 8003eb8:	69f9      	ldr	r1, [r7, #28]
 8003eba:	4401      	add	r1, r0
 8003ebc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ee2:	6113      	str	r3, [r2, #16]
 8003ee4:	e03a      	b.n	8003f5c <USB_EPStartXfer+0x3e4>
 8003ee6:	bf00      	nop
 8003ee8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	8afa      	ldrh	r2, [r7, #22]
 8003f08:	fb03 f202 	mul.w	r2, r3, r2
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	8afb      	ldrh	r3, [r7, #22]
 8003f20:	04d9      	lsls	r1, r3, #19
 8003f22:	4b38      	ldr	r3, [pc, #224]	; (8004004 <USB_EPStartXfer+0x48c>)
 8003f24:	400b      	ands	r3, r1
 8003f26:	69b9      	ldr	r1, [r7, #24]
 8003f28:	0148      	lsls	r0, r1, #5
 8003f2a:	69f9      	ldr	r1, [r7, #28]
 8003f2c:	4401      	add	r1, r0
 8003f2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f32:	4313      	orrs	r3, r2
 8003f34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4c:	69b9      	ldr	r1, [r7, #24]
 8003f4e:	0148      	lsls	r0, r1, #5
 8003f50:	69f9      	ldr	r1, [r7, #28]
 8003f52:	4401      	add	r1, r0
 8003f54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10d      	bne.n	8003f7e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6919      	ldr	r1, [r3, #16]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	791b      	ldrb	r3, [r3, #4]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d128      	bne.n	8003fd8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d110      	bne.n	8003fb8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e00f      	b.n	8003fd8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	0151      	lsls	r1, r2, #5
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	440a      	add	r2, r1
 8003fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ff6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	1ff80000 	.word	0x1ff80000

08004008 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	785b      	ldrb	r3, [r3, #1]
 8004024:	2b01      	cmp	r3, #1
 8004026:	f040 80ce 	bne.w	80041c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d132      	bne.n	8004098 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	0151      	lsls	r1, r2, #5
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	440a      	add	r2, r1
 8004048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004050:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	0151      	lsls	r1, r2, #5
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	440a      	add	r2, r1
 800406c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004070:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004074:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	0151      	lsls	r1, r2, #5
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	440a      	add	r2, r1
 800408c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004090:	0cdb      	lsrs	r3, r3, #19
 8004092:	04db      	lsls	r3, r3, #19
 8004094:	6113      	str	r3, [r2, #16]
 8004096:	e04e      	b.n	8004136 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b2:	0cdb      	lsrs	r3, r3, #19
 80040b4:	04db      	lsls	r3, r3, #19
 80040b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d903      	bls.n	80040f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	0151      	lsls	r1, r2, #5
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	440a      	add	r2, r1
 8004106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800410e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004126:	6939      	ldr	r1, [r7, #16]
 8004128:	0148      	lsls	r0, r1, #5
 800412a:	6979      	ldr	r1, [r7, #20]
 800412c:	4401      	add	r1, r0
 800412e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004132:	4313      	orrs	r3, r2
 8004134:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d11e      	bne.n	800417a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	461a      	mov	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	0151      	lsls	r1, r2, #5
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	440a      	add	r2, r1
 800416e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004172:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	e097      	b.n	80042aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	440a      	add	r2, r1
 8004190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004194:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004198:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8083 	beq.w	80042aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	2101      	movs	r1, #1
 80041b6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ba:	6979      	ldr	r1, [r7, #20]
 80041bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c0:	4313      	orrs	r3, r2
 80041c2:	634b      	str	r3, [r1, #52]	; 0x34
 80041c4:	e071      	b.n	80042aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e0:	0cdb      	lsrs	r3, r3, #19
 80041e2:	04db      	lsls	r3, r3, #19
 80041e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004200:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004204:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004208:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800423c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004240:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004258:	6939      	ldr	r1, [r7, #16]
 800425a:	0148      	lsls	r0, r1, #5
 800425c:	6979      	ldr	r1, [r7, #20]
 800425e:	4401      	add	r1, r0
 8004260:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10d      	bne.n	800428a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6919      	ldr	r1, [r3, #16]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	460a      	mov	r2, r1
 8004288:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d14a      	bne.n	800436c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ee:	f040 8086 	bne.w	80043fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	7812      	ldrb	r2, [r2, #0]
 8004306:	0151      	lsls	r1, r2, #5
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	440a      	add	r2, r1
 800430c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004310:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004314:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	7812      	ldrb	r2, [r2, #0]
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	440a      	add	r2, r1
 8004330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004338:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3301      	adds	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f242 7210 	movw	r2, #10000	; 0x2710
 8004346:	4293      	cmp	r3, r2
 8004348:	d902      	bls.n	8004350 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]
          break;
 800434e:	e056      	b.n	80043fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004368:	d0e7      	beq.n	800433a <USB_EPStopXfer+0x82>
 800436a:	e048      	b.n	80043fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004384:	d13b      	bne.n	80043fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	0151      	lsls	r1, r2, #5
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	440a      	add	r2, r1
 80043c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3301      	adds	r3, #1
 80043d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80043da:	4293      	cmp	r3, r2
 80043dc:	d902      	bls.n	80043e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
          break;
 80043e2:	e00c      	b.n	80043fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043fc:	d0e7      	beq.n	80043ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004400:	4618      	mov	r0, r3
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800440c:	b480      	push	{r7}
 800440e:	b089      	sub	sp, #36	; 0x24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4611      	mov	r1, r2
 8004418:	461a      	mov	r2, r3
 800441a:	460b      	mov	r3, r1
 800441c:	71fb      	strb	r3, [r7, #7]
 800441e:	4613      	mov	r3, r2
 8004420:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800442a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d123      	bne.n	800447a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004432:	88bb      	ldrh	r3, [r7, #4]
 8004434:	3303      	adds	r3, #3
 8004436:	089b      	lsrs	r3, r3, #2
 8004438:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	e018      	b.n	8004472 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	031a      	lsls	r2, r3, #12
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4413      	add	r3, r2
 8004448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444c:	461a      	mov	r2, r3
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	3301      	adds	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3301      	adds	r3, #1
 800445e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	3301      	adds	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	3301      	adds	r3, #1
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	429a      	cmp	r2, r3
 8004478:	d3e2      	bcc.n	8004440 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3724      	adds	r7, #36	; 0x24
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004488:	b480      	push	{r7}
 800448a:	b08b      	sub	sp, #44	; 0x2c
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	623b      	str	r3, [r7, #32]
 80044b2:	e014      	b.n	80044de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	601a      	str	r2, [r3, #0]
    pDest++;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	3301      	adds	r3, #1
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	3301      	adds	r3, #1
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	3301      	adds	r3, #1
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	3301      	adds	r3, #1
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	3301      	adds	r3, #1
 80044dc:	623b      	str	r3, [r7, #32]
 80044de:	6a3a      	ldr	r2, [r7, #32]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d3e6      	bcc.n	80044b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044e6:	8bfb      	ldrh	r3, [r7, #30]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01e      	beq.n	800452a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f6:	461a      	mov	r2, r3
 80044f8:	f107 0310 	add.w	r3, r7, #16
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
 800450c:	b2da      	uxtb	r2, r3
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	701a      	strb	r2, [r3, #0]
      i++;
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	3301      	adds	r3, #1
 8004516:	623b      	str	r3, [r7, #32]
      pDest++;
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	3301      	adds	r3, #1
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800451e:	8bfb      	ldrh	r3, [r7, #30]
 8004520:	3b01      	subs	r3, #1
 8004522:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004524:	8bfb      	ldrh	r3, [r7, #30]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1ea      	bne.n	8004500 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800452c:	4618      	mov	r0, r3
 800452e:	372c      	adds	r7, #44	; 0x2c
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d12c      	bne.n	80045ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db12      	blt.n	800458c <USB_EPSetStall+0x54>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00f      	beq.n	800458c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	0151      	lsls	r1, r2, #5
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	440a      	add	r2, r1
 8004582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004586:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800458a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	e02b      	b.n	8004606 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	db12      	blt.n	80045e6 <USB_EPSetStall+0xae>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00f      	beq.n	80045e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	0151      	lsls	r1, r2, #5
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	440a      	add	r2, r1
 80045dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	0151      	lsls	r1, r2, #5
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	440a      	add	r2, r1
 80045fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004604:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	785b      	ldrb	r3, [r3, #1]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d128      	bne.n	8004682 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800464e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	791b      	ldrb	r3, [r3, #4]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d003      	beq.n	8004660 <USB_EPClearStall+0x4c>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	791b      	ldrb	r3, [r3, #4]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d138      	bne.n	80046d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e027      	b.n	80046d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	0151      	lsls	r1, r2, #5
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	440a      	add	r2, r1
 8004698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800469c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	791b      	ldrb	r3, [r3, #4]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d003      	beq.n	80046b2 <USB_EPClearStall+0x9e>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	791b      	ldrb	r3, [r3, #4]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d10f      	bne.n	80046d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	0151      	lsls	r1, r2, #5
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	440a      	add	r2, r1
 80046c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004702:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800475a:	f023 0302 	bic.w	r3, r3, #2
 800475e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004788:	f023 0303 	bic.w	r3, r3, #3
 800478c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800479c:	f043 0302 	orr.w	r3, r3, #2
 80047a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047c8:	68fb      	ldr	r3, [r7, #12]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	0c1b      	lsrs	r3, r3, #16
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	4013      	ands	r3, r2
 800482c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	b29b      	uxth	r3, r3
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800486c:	68bb      	ldr	r3, [r7, #8]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800487a:	b480      	push	{r7}
 800487c:	b087      	sub	sp, #28
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	fa22 f303 	lsr.w	r3, r2, r3
 80048aa:	01db      	lsls	r3, r3, #7
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4013      	ands	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048c8:	68bb      	ldr	r3, [r7, #8]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0301 	and.w	r3, r3, #1
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004910:	f023 0307 	bic.w	r3, r3, #7
 8004914:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004928:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	460b      	mov	r3, r1
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	333c      	adds	r3, #60	; 0x3c
 800494e:	3304      	adds	r3, #4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4a26      	ldr	r2, [pc, #152]	; (80049f0 <USB_EP0_OutStart+0xb8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d90a      	bls.n	8004972 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800496c:	d101      	bne.n	8004972 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e037      	b.n	80049e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	461a      	mov	r2, r3
 800497a:	2300      	movs	r3, #0
 800497c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800498c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a0:	f043 0318 	orr.w	r3, r3, #24
 80049a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80049b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049ba:	7afb      	ldrb	r3, [r7, #11]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d10f      	bne.n	80049e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	461a      	mov	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	4f54300a 	.word	0x4f54300a

080049f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3301      	adds	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <USB_CoreReset+0x64>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e01b      	b.n	8004a4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	daf2      	bge.n	8004a00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f043 0201 	orr.w	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <USB_CoreReset+0x64>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d0f0      	beq.n	8004a2a <USB_CoreReset+0x36>

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	00030d40 	.word	0x00030d40

08004a5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a6c:	f002 fc94 	bl	8007398 <USBD_static_malloc>
 8004a70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	32b0      	adds	r2, #176	; 0xb0
 8004a82:	2100      	movs	r1, #0
 8004a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e0d4      	b.n	8004c36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004a8c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004a90:	2100      	movs	r1, #0
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f002 fce8 	bl	8007468 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	32b0      	adds	r2, #176	; 0xb0
 8004aa2:	68f9      	ldr	r1, [r7, #12]
 8004aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	32b0      	adds	r2, #176	; 0xb0
 8004ab2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	7c1b      	ldrb	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d138      	bne.n	8004b36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ac4:	4b5e      	ldr	r3, [pc, #376]	; (8004c40 <USBD_CDC_Init+0x1e4>)
 8004ac6:	7819      	ldrb	r1, [r3, #0]
 8004ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004acc:	2202      	movs	r2, #2
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f002 fb3f 	bl	8007152 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ad4:	4b5a      	ldr	r3, [pc, #360]	; (8004c40 <USBD_CDC_Init+0x1e4>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	f003 020f 	and.w	r2, r3, #15
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3324      	adds	r3, #36	; 0x24
 8004aea:	2201      	movs	r2, #1
 8004aec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004aee:	4b55      	ldr	r3, [pc, #340]	; (8004c44 <USBD_CDC_Init+0x1e8>)
 8004af0:	7819      	ldrb	r1, [r3, #0]
 8004af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af6:	2202      	movs	r2, #2
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f002 fb2a 	bl	8007152 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004afe:	4b51      	ldr	r3, [pc, #324]	; (8004c44 <USBD_CDC_Init+0x1e8>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f003 020f 	and.w	r2, r3, #15
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b16:	2201      	movs	r2, #1
 8004b18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b1a:	4b4b      	ldr	r3, [pc, #300]	; (8004c48 <USBD_CDC_Init+0x1ec>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	f003 020f 	and.w	r2, r3, #15
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	3326      	adds	r3, #38	; 0x26
 8004b30:	2210      	movs	r2, #16
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	e035      	b.n	8004ba2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b36:	4b42      	ldr	r3, [pc, #264]	; (8004c40 <USBD_CDC_Init+0x1e4>)
 8004b38:	7819      	ldrb	r1, [r3, #0]
 8004b3a:	2340      	movs	r3, #64	; 0x40
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f002 fb07 	bl	8007152 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b44:	4b3e      	ldr	r3, [pc, #248]	; (8004c40 <USBD_CDC_Init+0x1e4>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f003 020f 	and.w	r2, r3, #15
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3324      	adds	r3, #36	; 0x24
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b5e:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <USBD_CDC_Init+0x1e8>)
 8004b60:	7819      	ldrb	r1, [r3, #0]
 8004b62:	2340      	movs	r3, #64	; 0x40
 8004b64:	2202      	movs	r2, #2
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f002 faf3 	bl	8007152 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b6c:	4b35      	ldr	r3, [pc, #212]	; (8004c44 <USBD_CDC_Init+0x1e8>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f003 020f 	and.w	r2, r3, #15
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b84:	2201      	movs	r2, #1
 8004b86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b88:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <USBD_CDC_Init+0x1ec>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	f003 020f 	and.w	r2, r3, #15
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3326      	adds	r3, #38	; 0x26
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ba2:	4b29      	ldr	r3, [pc, #164]	; (8004c48 <USBD_CDC_Init+0x1ec>)
 8004ba4:	7819      	ldrb	r1, [r3, #0]
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	2203      	movs	r2, #3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f002 fad1 	bl	8007152 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004bb0:	4b25      	ldr	r3, [pc, #148]	; (8004c48 <USBD_CDC_Init+0x1ec>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3324      	adds	r3, #36	; 0x24
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	33b0      	adds	r3, #176	; 0xb0
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004c00:	2302      	movs	r3, #2
 8004c02:	e018      	b.n	8004c36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	7c1b      	ldrb	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <USBD_CDC_Init+0x1e8>)
 8004c0e:	7819      	ldrb	r1, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f002 fb88 	bl	8007330 <USBD_LL_PrepareReceive>
 8004c20:	e008      	b.n	8004c34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <USBD_CDC_Init+0x1e8>)
 8004c24:	7819      	ldrb	r1, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c2c:	2340      	movs	r3, #64	; 0x40
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f002 fb7e 	bl	8007330 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000097 	.word	0x20000097
 8004c44:	20000098 	.word	0x20000098
 8004c48:	20000099 	.word	0x20000099

08004c4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004c58:	4b3a      	ldr	r3, [pc, #232]	; (8004d44 <USBD_CDC_DeInit+0xf8>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f002 fa9d 	bl	800719e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004c64:	4b37      	ldr	r3, [pc, #220]	; (8004d44 <USBD_CDC_DeInit+0xf8>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 020f 	and.w	r2, r3, #15
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	3324      	adds	r3, #36	; 0x24
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004c7e:	4b32      	ldr	r3, [pc, #200]	; (8004d48 <USBD_CDC_DeInit+0xfc>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f002 fa8a 	bl	800719e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004c8a:	4b2f      	ldr	r3, [pc, #188]	; (8004d48 <USBD_CDC_DeInit+0xfc>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	f003 020f 	and.w	r2, r3, #15
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004ca6:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <USBD_CDC_DeInit+0x100>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f002 fa76 	bl	800719e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004cb2:	4b26      	ldr	r3, [pc, #152]	; (8004d4c <USBD_CDC_DeInit+0x100>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	f003 020f 	and.w	r2, r3, #15
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	3324      	adds	r3, #36	; 0x24
 8004cc8:	2200      	movs	r2, #0
 8004cca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004ccc:	4b1f      	ldr	r3, [pc, #124]	; (8004d4c <USBD_CDC_DeInit+0x100>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	f003 020f 	and.w	r2, r3, #15
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3326      	adds	r3, #38	; 0x26
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	32b0      	adds	r2, #176	; 0xb0
 8004cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01f      	beq.n	8004d38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	33b0      	adds	r3, #176	; 0xb0
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	32b0      	adds	r2, #176	; 0xb0
 8004d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f002 fb4a 	bl	80073b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	32b0      	adds	r2, #176	; 0xb0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000097 	.word	0x20000097
 8004d48:	20000098 	.word	0x20000098
 8004d4c:	20000099 	.word	0x20000099

08004d50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	32b0      	adds	r2, #176	; 0xb0
 8004d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e0bf      	b.n	8004f00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d050      	beq.n	8004e2e <USBD_CDC_Setup+0xde>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	f040 80af 	bne.w	8004ef0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	88db      	ldrh	r3, [r3, #6]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d03a      	beq.n	8004e10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	b25b      	sxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	da1b      	bge.n	8004ddc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	33b0      	adds	r3, #176	; 0xb0
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004dba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	88d2      	ldrh	r2, [r2, #6]
 8004dc0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	88db      	ldrh	r3, [r3, #6]
 8004dc6:	2b07      	cmp	r3, #7
 8004dc8:	bf28      	it	cs
 8004dca:	2307      	movcs	r3, #7
 8004dcc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	89fa      	ldrh	r2, [r7, #14]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f001 fd89 	bl	80068ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004dda:	e090      	b.n	8004efe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	785a      	ldrb	r2, [r3, #1]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	88db      	ldrh	r3, [r3, #6]
 8004dea:	2b3f      	cmp	r3, #63	; 0x3f
 8004dec:	d803      	bhi.n	8004df6 <USBD_CDC_Setup+0xa6>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	88db      	ldrh	r3, [r3, #6]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	e000      	b.n	8004df8 <USBD_CDC_Setup+0xa8>
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004dfe:	6939      	ldr	r1, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004e06:	461a      	mov	r2, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f001 fd9b 	bl	8006944 <USBD_CtlPrepareRx>
      break;
 8004e0e:	e076      	b.n	8004efe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	33b0      	adds	r3, #176	; 0xb0
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	7850      	ldrb	r0, [r2, #1]
 8004e26:	2200      	movs	r2, #0
 8004e28:	6839      	ldr	r1, [r7, #0]
 8004e2a:	4798      	blx	r3
      break;
 8004e2c:	e067      	b.n	8004efe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	785b      	ldrb	r3, [r3, #1]
 8004e32:	2b0b      	cmp	r3, #11
 8004e34:	d851      	bhi.n	8004eda <USBD_CDC_Setup+0x18a>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <USBD_CDC_Setup+0xec>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e6d 	.word	0x08004e6d
 8004e40:	08004ee9 	.word	0x08004ee9
 8004e44:	08004edb 	.word	0x08004edb
 8004e48:	08004edb 	.word	0x08004edb
 8004e4c:	08004edb 	.word	0x08004edb
 8004e50:	08004edb 	.word	0x08004edb
 8004e54:	08004edb 	.word	0x08004edb
 8004e58:	08004edb 	.word	0x08004edb
 8004e5c:	08004edb 	.word	0x08004edb
 8004e60:	08004edb 	.word	0x08004edb
 8004e64:	08004e97 	.word	0x08004e97
 8004e68:	08004ec1 	.word	0x08004ec1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d107      	bne.n	8004e88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e78:	f107 030a 	add.w	r3, r7, #10
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 fd33 	bl	80068ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e86:	e032      	b.n	8004eee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 fcbd 	bl	800680a <USBD_CtlError>
            ret = USBD_FAIL;
 8004e90:	2303      	movs	r3, #3
 8004e92:	75fb      	strb	r3, [r7, #23]
          break;
 8004e94:	e02b      	b.n	8004eee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d107      	bne.n	8004eb2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ea2:	f107 030d 	add.w	r3, r7, #13
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f001 fd1e 	bl	80068ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004eb0:	e01d      	b.n	8004eee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 fca8 	bl	800680a <USBD_CtlError>
            ret = USBD_FAIL;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8004ebe:	e016      	b.n	8004eee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d00f      	beq.n	8004eec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004ecc:	6839      	ldr	r1, [r7, #0]
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 fc9b 	bl	800680a <USBD_CtlError>
            ret = USBD_FAIL;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004ed8:	e008      	b.n	8004eec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f001 fc94 	bl	800680a <USBD_CtlError>
          ret = USBD_FAIL;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ee6:	e002      	b.n	8004eee <USBD_CDC_Setup+0x19e>
          break;
 8004ee8:	bf00      	nop
 8004eea:	e008      	b.n	8004efe <USBD_CDC_Setup+0x1ae>
          break;
 8004eec:	bf00      	nop
      }
      break;
 8004eee:	e006      	b.n	8004efe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004ef0:	6839      	ldr	r1, [r7, #0]
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f001 fc89 	bl	800680a <USBD_CtlError>
      ret = USBD_FAIL;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	75fb      	strb	r3, [r7, #23]
      break;
 8004efc:	bf00      	nop
  }

  return (uint8_t)ret;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004f1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	32b0      	adds	r2, #176	; 0xb0
 8004f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e065      	b.n	8004ffe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	32b0      	adds	r2, #176	; 0xb0
 8004f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	f003 020f 	and.w	r2, r3, #15
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3318      	adds	r3, #24
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d02f      	beq.n	8004fbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	f003 020f 	and.w	r2, r3, #15
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	3318      	adds	r3, #24
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	f003 010f 	and.w	r1, r3, #15
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	440b      	add	r3, r1
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4403      	add	r3, r0
 8004f84:	3348      	adds	r3, #72	; 0x48
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d112      	bne.n	8004fbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	f003 020f 	and.w	r2, r3, #15
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3318      	adds	r3, #24
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004fae:	78f9      	ldrb	r1, [r7, #3]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f002 f99a 	bl	80072ee <USBD_LL_Transmit>
 8004fba:	e01f      	b.n	8004ffc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	33b0      	adds	r3, #176	; 0xb0
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d010      	beq.n	8004ffc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	33b0      	adds	r3, #176	; 0xb0
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	32b0      	adds	r2, #176	; 0xb0
 800501c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005020:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	32b0      	adds	r2, #176	; 0xb0
 800502c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005034:	2303      	movs	r3, #3
 8005036:	e01a      	b.n	800506e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	4619      	mov	r1, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f002 f998 	bl	8007372 <USBD_LL_GetRxDataSize>
 8005042:	4602      	mov	r2, r0
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	33b0      	adds	r3, #176	; 0xb0
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005068:	4611      	mov	r1, r2
 800506a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	32b0      	adds	r2, #176	; 0xb0
 8005088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005094:	2303      	movs	r3, #3
 8005096:	e025      	b.n	80050e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	33b0      	adds	r3, #176	; 0xb0
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01a      	beq.n	80050e2 <USBD_CDC_EP0_RxReady+0x6c>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050b2:	2bff      	cmp	r3, #255	; 0xff
 80050b4:	d015      	beq.n	80050e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	33b0      	adds	r3, #176	; 0xb0
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80050ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80050d6:	b292      	uxth	r2, r2
 80050d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	22ff      	movs	r2, #255	; 0xff
 80050de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80050f4:	2182      	movs	r1, #130	; 0x82
 80050f6:	4818      	ldr	r0, [pc, #96]	; (8005158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80050f8:	f000 fd4f 	bl	8005b9a <USBD_GetEpDesc>
 80050fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80050fe:	2101      	movs	r1, #1
 8005100:	4815      	ldr	r0, [pc, #84]	; (8005158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005102:	f000 fd4a 	bl	8005b9a <USBD_GetEpDesc>
 8005106:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005108:	2181      	movs	r1, #129	; 0x81
 800510a:	4813      	ldr	r0, [pc, #76]	; (8005158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800510c:	f000 fd45 	bl	8005b9a <USBD_GetEpDesc>
 8005110:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2210      	movs	r2, #16
 800511c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d006      	beq.n	8005132 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2200      	movs	r2, #0
 8005128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800512c:	711a      	strb	r2, [r3, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d006      	beq.n	8005146 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005140:	711a      	strb	r2, [r3, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2243      	movs	r2, #67	; 0x43
 800514a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800514c:	4b02      	ldr	r3, [pc, #8]	; (8005158 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000054 	.word	0x20000054

0800515c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005164:	2182      	movs	r1, #130	; 0x82
 8005166:	4818      	ldr	r0, [pc, #96]	; (80051c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005168:	f000 fd17 	bl	8005b9a <USBD_GetEpDesc>
 800516c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800516e:	2101      	movs	r1, #1
 8005170:	4815      	ldr	r0, [pc, #84]	; (80051c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005172:	f000 fd12 	bl	8005b9a <USBD_GetEpDesc>
 8005176:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005178:	2181      	movs	r1, #129	; 0x81
 800517a:	4813      	ldr	r0, [pc, #76]	; (80051c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800517c:	f000 fd0d 	bl	8005b9a <USBD_GetEpDesc>
 8005180:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2210      	movs	r2, #16
 800518c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2200      	movs	r2, #0
 8005198:	711a      	strb	r2, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f042 0202 	orr.w	r2, r2, #2
 80051a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d006      	beq.n	80051b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	711a      	strb	r2, [r3, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f042 0202 	orr.w	r2, r2, #2
 80051b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2243      	movs	r2, #67	; 0x43
 80051ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051bc:	4b02      	ldr	r3, [pc, #8]	; (80051c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000054 	.word	0x20000054

080051cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80051d4:	2182      	movs	r1, #130	; 0x82
 80051d6:	4818      	ldr	r0, [pc, #96]	; (8005238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051d8:	f000 fcdf 	bl	8005b9a <USBD_GetEpDesc>
 80051dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80051de:	2101      	movs	r1, #1
 80051e0:	4815      	ldr	r0, [pc, #84]	; (8005238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051e2:	f000 fcda 	bl	8005b9a <USBD_GetEpDesc>
 80051e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80051e8:	2181      	movs	r1, #129	; 0x81
 80051ea:	4813      	ldr	r0, [pc, #76]	; (8005238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051ec:	f000 fcd5 	bl	8005b9a <USBD_GetEpDesc>
 80051f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2210      	movs	r2, #16
 80051fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2200      	movs	r2, #0
 8005208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800520c:	711a      	strb	r2, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005220:	711a      	strb	r2, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2243      	movs	r2, #67	; 0x43
 800522a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800522c:	4b02      	ldr	r3, [pc, #8]	; (8005238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000054 	.word	0x20000054

0800523c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	220a      	movs	r2, #10
 8005248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800524a:	4b03      	ldr	r3, [pc, #12]	; (8005258 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	20000010 	.word	0x20000010

0800525c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800526c:	2303      	movs	r3, #3
 800526e:	e009      	b.n	8005284 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	33b0      	adds	r3, #176	; 0xb0
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	32b0      	adds	r2, #176	; 0xb0
 80052a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052aa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e008      	b.n	80052c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	32b0      	adds	r2, #176	; 0xb0
 80052e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e004      	b.n	8005302 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	32b0      	adds	r2, #176	; 0xb0
 8005322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005326:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	32b0      	adds	r2, #176	; 0xb0
 8005336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800533e:	2303      	movs	r3, #3
 8005340:	e025      	b.n	800538e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005348:	2b00      	cmp	r3, #0
 800534a:	d11f      	bne.n	800538c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2201      	movs	r2, #1
 8005350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005354:	4b10      	ldr	r3, [pc, #64]	; (8005398 <USBD_CDC_TransmitPacket+0x88>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	f003 020f 	and.w	r2, r3, #15
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4403      	add	r3, r0
 800536e:	3318      	adds	r3, #24
 8005370:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005372:	4b09      	ldr	r3, [pc, #36]	; (8005398 <USBD_CDC_TransmitPacket+0x88>)
 8005374:	7819      	ldrb	r1, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 ffb3 	bl	80072ee <USBD_LL_Transmit>

    ret = USBD_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800538c:	7bfb      	ldrb	r3, [r7, #15]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000097 	.word	0x20000097

0800539c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	32b0      	adds	r2, #176	; 0xb0
 80053ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	32b0      	adds	r2, #176	; 0xb0
 80053be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e018      	b.n	80053fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	7c1b      	ldrb	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053d2:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <USBD_CDC_ReceivePacket+0x68>)
 80053d4:	7819      	ldrb	r1, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 ffa5 	bl	8007330 <USBD_LL_PrepareReceive>
 80053e6:	e008      	b.n	80053fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <USBD_CDC_ReceivePacket+0x68>)
 80053ea:	7819      	ldrb	r1, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053f2:	2340      	movs	r3, #64	; 0x40
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 ff9b 	bl	8007330 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000098 	.word	0x20000098

08005408 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800541c:	2303      	movs	r3, #3
 800541e:	e01f      	b.n	8005460 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	79fa      	ldrb	r2, [r7, #7]
 8005452:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f001 fe15 	bl	8007084 <USBD_LL_Init>
 800545a:	4603      	mov	r3, r0
 800545c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800545e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800547c:	2303      	movs	r3, #3
 800547e:	e025      	b.n	80054cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	32ae      	adds	r2, #174	; 0xae
 8005492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00f      	beq.n	80054bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	32ae      	adds	r2, #174	; 0xae
 80054a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	f107 020e 	add.w	r2, r7, #14
 80054b0:	4610      	mov	r0, r2
 80054b2:	4798      	blx	r3
 80054b4:	4602      	mov	r2, r0
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 fe1d 	bl	800711c <USBD_LL_Start>
 80054e2:	4603      	mov	r3, r0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	4611      	mov	r1, r2
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	4611      	mov	r1, r2
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005560:	2303      	movs	r3, #3
 8005562:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f001 f908 	bl	8006796 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005594:	461a      	mov	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d01a      	beq.n	80055e0 <USBD_LL_SetupStage+0x72>
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d822      	bhi.n	80055f4 <USBD_LL_SetupStage+0x86>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <USBD_LL_SetupStage+0x4a>
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d00a      	beq.n	80055cc <USBD_LL_SetupStage+0x5e>
 80055b6:	e01d      	b.n	80055f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fb5f 	bl	8005c84 <USBD_StdDevReq>
 80055c6:	4603      	mov	r3, r0
 80055c8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ca:	e020      	b.n	800560e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fbc7 	bl	8005d68 <USBD_StdItfReq>
 80055da:	4603      	mov	r3, r0
 80055dc:	73fb      	strb	r3, [r7, #15]
      break;
 80055de:	e016      	b.n	800560e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fc29 	bl	8005e40 <USBD_StdEPReq>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]
      break;
 80055f2:	e00c      	b.n	800560e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f001 fdea 	bl	80071dc <USBD_LL_StallEP>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]
      break;
 800560c:	bf00      	nop
  }

  return ret;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	460b      	mov	r3, r1
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800562a:	7afb      	ldrb	r3, [r7, #11]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d16e      	bne.n	800570e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005636:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800563e:	2b03      	cmp	r3, #3
 8005640:	f040 8098 	bne.w	8005774 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	429a      	cmp	r2, r3
 800564e:	d913      	bls.n	8005678 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	1ad2      	subs	r2, r2, r3
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	4293      	cmp	r3, r2
 8005668:	bf28      	it	cs
 800566a:	4613      	movcs	r3, r2
 800566c:	461a      	mov	r2, r3
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f001 f984 	bl	800697e <USBD_CtlContinueRx>
 8005676:	e07d      	b.n	8005774 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	2b02      	cmp	r3, #2
 8005684:	d014      	beq.n	80056b0 <USBD_LL_DataOutStage+0x98>
 8005686:	2b02      	cmp	r3, #2
 8005688:	d81d      	bhi.n	80056c6 <USBD_LL_DataOutStage+0xae>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <USBD_LL_DataOutStage+0x7c>
 800568e:	2b01      	cmp	r3, #1
 8005690:	d003      	beq.n	800569a <USBD_LL_DataOutStage+0x82>
 8005692:	e018      	b.n	80056c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	75bb      	strb	r3, [r7, #22]
            break;
 8005698:	e018      	b.n	80056cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	4619      	mov	r1, r3
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fa5e 	bl	8005b66 <USBD_CoreFindIF>
 80056aa:	4603      	mov	r3, r0
 80056ac:	75bb      	strb	r3, [r7, #22]
            break;
 80056ae:	e00d      	b.n	80056cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	4619      	mov	r1, r3
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fa60 	bl	8005b80 <USBD_CoreFindEP>
 80056c0:	4603      	mov	r3, r0
 80056c2:	75bb      	strb	r3, [r7, #22]
            break;
 80056c4:	e002      	b.n	80056cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	75bb      	strb	r3, [r7, #22]
            break;
 80056ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80056cc:	7dbb      	ldrb	r3, [r7, #22]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d119      	bne.n	8005706 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d113      	bne.n	8005706 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80056de:	7dba      	ldrb	r2, [r7, #22]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	32ae      	adds	r2, #174	; 0xae
 80056e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80056ee:	7dba      	ldrb	r2, [r7, #22]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80056f6:	7dba      	ldrb	r2, [r7, #22]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	32ae      	adds	r2, #174	; 0xae
 80056fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f001 f94a 	bl	80069a0 <USBD_CtlSendStatus>
 800570c:	e032      	b.n	8005774 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005714:	b2db      	uxtb	r3, r3
 8005716:	4619      	mov	r1, r3
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fa31 	bl	8005b80 <USBD_CoreFindEP>
 800571e:	4603      	mov	r3, r0
 8005720:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005722:	7dbb      	ldrb	r3, [r7, #22]
 8005724:	2bff      	cmp	r3, #255	; 0xff
 8005726:	d025      	beq.n	8005774 <USBD_LL_DataOutStage+0x15c>
 8005728:	7dbb      	ldrb	r3, [r7, #22]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d122      	bne.n	8005774 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b03      	cmp	r3, #3
 8005738:	d117      	bne.n	800576a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800573a:	7dba      	ldrb	r2, [r7, #22]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	32ae      	adds	r2, #174	; 0xae
 8005740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00f      	beq.n	800576a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800574a:	7dba      	ldrb	r2, [r7, #22]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005752:	7dba      	ldrb	r2, [r7, #22]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	32ae      	adds	r2, #174	; 0xae
 8005758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	7afa      	ldrb	r2, [r7, #11]
 8005760:	4611      	mov	r1, r2
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	4798      	blx	r3
 8005766:	4603      	mov	r3, r0
 8005768:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	e000      	b.n	8005776 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b086      	sub	sp, #24
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	460b      	mov	r3, r1
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d16f      	bne.n	8005872 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3314      	adds	r3, #20
 8005796:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d15a      	bne.n	8005858 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d914      	bls.n	80057d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f001 f8ac 	bl	8006922 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057ca:	2300      	movs	r3, #0
 80057cc:	2200      	movs	r2, #0
 80057ce:	2100      	movs	r1, #0
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f001 fdad 	bl	8007330 <USBD_LL_PrepareReceive>
 80057d6:	e03f      	b.n	8005858 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d11c      	bne.n	800581e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d316      	bcc.n	800581e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d20f      	bcs.n	800581e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057fe:	2200      	movs	r2, #0
 8005800:	2100      	movs	r1, #0
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f001 f88d 	bl	8006922 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005810:	2300      	movs	r3, #0
 8005812:	2200      	movs	r2, #0
 8005814:	2100      	movs	r1, #0
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f001 fd8a 	bl	8007330 <USBD_LL_PrepareReceive>
 800581c:	e01c      	b.n	8005858 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b03      	cmp	r3, #3
 8005828:	d10f      	bne.n	800584a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800584a:	2180      	movs	r1, #128	; 0x80
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f001 fcc5 	bl	80071dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f001 f8b7 	bl	80069c6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d03a      	beq.n	80058d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f7ff fe42 	bl	80054ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005870:	e032      	b.n	80058d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005872:	7afb      	ldrb	r3, [r7, #11]
 8005874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005878:	b2db      	uxtb	r3, r3
 800587a:	4619      	mov	r1, r3
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f97f 	bl	8005b80 <USBD_CoreFindEP>
 8005882:	4603      	mov	r3, r0
 8005884:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	2bff      	cmp	r3, #255	; 0xff
 800588a:	d025      	beq.n	80058d8 <USBD_LL_DataInStage+0x15a>
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d122      	bne.n	80058d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b03      	cmp	r3, #3
 800589c:	d11c      	bne.n	80058d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800589e:	7dfa      	ldrb	r2, [r7, #23]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	32ae      	adds	r2, #174	; 0xae
 80058a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d014      	beq.n	80058d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80058ae:	7dfa      	ldrb	r2, [r7, #23]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80058b6:	7dfa      	ldrb	r2, [r7, #23]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	32ae      	adds	r2, #174	; 0xae
 80058bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	7afa      	ldrb	r2, [r7, #11]
 80058c4:	4611      	mov	r1, r2
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	4798      	blx	r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80058ce:	7dbb      	ldrb	r3, [r7, #22]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80058d4:	7dbb      	ldrb	r3, [r7, #22]
 80058d6:	e000      	b.n	80058da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d014      	beq.n	8005948 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6852      	ldr	r2, [r2, #4]
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	4611      	mov	r1, r2
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005944:	2303      	movs	r3, #3
 8005946:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005948:	2340      	movs	r3, #64	; 0x40
 800594a:	2200      	movs	r2, #0
 800594c:	2100      	movs	r1, #0
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 fbff 	bl	8007152 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2240      	movs	r2, #64	; 0x40
 8005960:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005964:	2340      	movs	r3, #64	; 0x40
 8005966:	2200      	movs	r2, #0
 8005968:	2180      	movs	r1, #128	; 0x80
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f001 fbf1 	bl	8007152 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2240      	movs	r2, #64	; 0x40
 800597a:	621a      	str	r2, [r3, #32]

  return ret;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2204      	movs	r2, #4
 80059c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d106      	bne.n	80059f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d110      	bne.n	8005a38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	32ae      	adds	r2, #174	; 0xae
 8005a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e01c      	b.n	8005a9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d115      	bne.n	8005a9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	32ae      	adds	r2, #174	; 0xae
 8005a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00b      	beq.n	8005a9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	32ae      	adds	r2, #174	; 0xae
 8005a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	78fa      	ldrb	r2, [r7, #3]
 8005a96:	4611      	mov	r1, r2
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	32ae      	adds	r2, #174	; 0xae
 8005abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e01c      	b.n	8005b02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d115      	bne.n	8005b00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	32ae      	adds	r2, #174	; 0xae
 8005ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	32ae      	adds	r2, #174	; 0xae
 8005af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	4611      	mov	r1, r2
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00e      	beq.n	8005b5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6852      	ldr	r2, [r2, #4]
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b086      	sub	sp, #24
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	885b      	ldrh	r3, [r3, #2]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d920      	bls.n	8005c04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005bca:	e013      	b.n	8005bf4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005bcc:	f107 030a 	add.w	r3, r7, #10
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6978      	ldr	r0, [r7, #20]
 8005bd4:	f000 f81b 	bl	8005c0e <USBD_GetNextDesc>
 8005bd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d108      	bne.n	8005bf4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	789b      	ldrb	r3, [r3, #2]
 8005bea:	78fa      	ldrb	r2, [r7, #3]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d008      	beq.n	8005c02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	885b      	ldrh	r3, [r3, #2]
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	897b      	ldrh	r3, [r7, #10]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d8e5      	bhi.n	8005bcc <USBD_GetEpDesc+0x32>
 8005c00:	e000      	b.n	8005c04 <USBD_GetEpDesc+0x6a>
          break;
 8005c02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c04:	693b      	ldr	r3, [r7, #16]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	881a      	ldrh	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c66:	8a3b      	ldrh	r3, [r7, #16]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	b21a      	sxth	r2, r3
 8005c6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	b21b      	sxth	r3, r3
 8005c74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c76:	89fb      	ldrh	r3, [r7, #14]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d005      	beq.n	8005caa <USBD_StdDevReq+0x26>
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d857      	bhi.n	8005d52 <USBD_StdDevReq+0xce>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00f      	beq.n	8005cc6 <USBD_StdDevReq+0x42>
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d153      	bne.n	8005d52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	32ae      	adds	r2, #174	; 0xae
 8005cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	4798      	blx	r3
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc4:	e04a      	b.n	8005d5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	2b09      	cmp	r3, #9
 8005ccc:	d83b      	bhi.n	8005d46 <USBD_StdDevReq+0xc2>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <USBD_StdDevReq+0x50>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005d29 	.word	0x08005d29
 8005cd8:	08005d3d 	.word	0x08005d3d
 8005cdc:	08005d47 	.word	0x08005d47
 8005ce0:	08005d33 	.word	0x08005d33
 8005ce4:	08005d47 	.word	0x08005d47
 8005ce8:	08005d07 	.word	0x08005d07
 8005cec:	08005cfd 	.word	0x08005cfd
 8005cf0:	08005d47 	.word	0x08005d47
 8005cf4:	08005d1f 	.word	0x08005d1f
 8005cf8:	08005d11 	.word	0x08005d11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa3c 	bl	800617c <USBD_GetDescriptor>
          break;
 8005d04:	e024      	b.n	8005d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fba1 	bl	8006450 <USBD_SetAddress>
          break;
 8005d0e:	e01f      	b.n	8005d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fbe0 	bl	80064d8 <USBD_SetConfig>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	73fb      	strb	r3, [r7, #15]
          break;
 8005d1c:	e018      	b.n	8005d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fc83 	bl	800662c <USBD_GetConfig>
          break;
 8005d26:	e013      	b.n	8005d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fcb4 	bl	8006698 <USBD_GetStatus>
          break;
 8005d30:	e00e      	b.n	8005d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fce3 	bl	8006700 <USBD_SetFeature>
          break;
 8005d3a:	e009      	b.n	8005d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fd07 	bl	8006752 <USBD_ClrFeature>
          break;
 8005d44:	e004      	b.n	8005d50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fd5e 	bl	800680a <USBD_CtlError>
          break;
 8005d4e:	bf00      	nop
      }
      break;
 8005d50:	e004      	b.n	8005d5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fd58 	bl	800680a <USBD_CtlError>
      break;
 8005d5a:	bf00      	nop
  }

  return ret;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop

08005d68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d7e:	2b40      	cmp	r3, #64	; 0x40
 8005d80:	d005      	beq.n	8005d8e <USBD_StdItfReq+0x26>
 8005d82:	2b40      	cmp	r3, #64	; 0x40
 8005d84:	d852      	bhi.n	8005e2c <USBD_StdItfReq+0xc4>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <USBD_StdItfReq+0x26>
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d14e      	bne.n	8005e2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d840      	bhi.n	8005e1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	889b      	ldrh	r3, [r3, #4]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d836      	bhi.n	8005e14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	889b      	ldrh	r3, [r3, #4]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fed9 	bl	8005b66 <USBD_CoreFindIF>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005db8:	7bbb      	ldrb	r3, [r7, #14]
 8005dba:	2bff      	cmp	r3, #255	; 0xff
 8005dbc:	d01d      	beq.n	8005dfa <USBD_StdItfReq+0x92>
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d11a      	bne.n	8005dfa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005dc4:	7bba      	ldrb	r2, [r7, #14]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	32ae      	adds	r2, #174	; 0xae
 8005dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00f      	beq.n	8005df4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005dd4:	7bba      	ldrb	r2, [r7, #14]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ddc:	7bba      	ldrb	r2, [r7, #14]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	32ae      	adds	r2, #174	; 0xae
 8005de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4798      	blx	r3
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005df2:	e004      	b.n	8005dfe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005df4:	2303      	movs	r3, #3
 8005df6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005df8:	e001      	b.n	8005dfe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	88db      	ldrh	r3, [r3, #6]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d110      	bne.n	8005e28 <USBD_StdItfReq+0xc0>
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10d      	bne.n	8005e28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fdc7 	bl	80069a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e12:	e009      	b.n	8005e28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fcf7 	bl	800680a <USBD_CtlError>
          break;
 8005e1c:	e004      	b.n	8005e28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fcf2 	bl	800680a <USBD_CtlError>
          break;
 8005e26:	e000      	b.n	8005e2a <USBD_StdItfReq+0xc2>
          break;
 8005e28:	bf00      	nop
      }
      break;
 8005e2a:	e004      	b.n	8005e36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fceb 	bl	800680a <USBD_CtlError>
      break;
 8005e34:	bf00      	nop
  }

  return ret;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	889b      	ldrh	r3, [r3, #4]
 8005e52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d007      	beq.n	8005e70 <USBD_StdEPReq+0x30>
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	f200 817f 	bhi.w	8006164 <USBD_StdEPReq+0x324>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d02a      	beq.n	8005ec0 <USBD_StdEPReq+0x80>
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	f040 817a 	bne.w	8006164 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e70:	7bbb      	ldrb	r3, [r7, #14]
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff fe83 	bl	8005b80 <USBD_CoreFindEP>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e7e:	7b7b      	ldrb	r3, [r7, #13]
 8005e80:	2bff      	cmp	r3, #255	; 0xff
 8005e82:	f000 8174 	beq.w	800616e <USBD_StdEPReq+0x32e>
 8005e86:	7b7b      	ldrb	r3, [r7, #13]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f040 8170 	bne.w	800616e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e8e:	7b7a      	ldrb	r2, [r7, #13]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005e96:	7b7a      	ldrb	r2, [r7, #13]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	32ae      	adds	r2, #174	; 0xae
 8005e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8163 	beq.w	800616e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005ea8:	7b7a      	ldrb	r2, [r7, #13]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	32ae      	adds	r2, #174	; 0xae
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ebe:	e156      	b.n	800616e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d008      	beq.n	8005eda <USBD_StdEPReq+0x9a>
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	f300 8145 	bgt.w	8006158 <USBD_StdEPReq+0x318>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 809b 	beq.w	800600a <USBD_StdEPReq+0x1ca>
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d03c      	beq.n	8005f52 <USBD_StdEPReq+0x112>
 8005ed8:	e13e      	b.n	8006158 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d002      	beq.n	8005eec <USBD_StdEPReq+0xac>
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d016      	beq.n	8005f18 <USBD_StdEPReq+0xd8>
 8005eea:	e02c      	b.n	8005f46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005eec:	7bbb      	ldrb	r3, [r7, #14]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00d      	beq.n	8005f0e <USBD_StdEPReq+0xce>
 8005ef2:	7bbb      	ldrb	r3, [r7, #14]
 8005ef4:	2b80      	cmp	r3, #128	; 0x80
 8005ef6:	d00a      	beq.n	8005f0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 f96d 	bl	80071dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f02:	2180      	movs	r1, #128	; 0x80
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 f969 	bl	80071dc <USBD_LL_StallEP>
 8005f0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f0c:	e020      	b.n	8005f50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fc7a 	bl	800680a <USBD_CtlError>
              break;
 8005f16:	e01b      	b.n	8005f50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	885b      	ldrh	r3, [r3, #2]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10e      	bne.n	8005f3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00b      	beq.n	8005f3e <USBD_StdEPReq+0xfe>
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	2b80      	cmp	r3, #128	; 0x80
 8005f2a:	d008      	beq.n	8005f3e <USBD_StdEPReq+0xfe>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	88db      	ldrh	r3, [r3, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 f94f 	bl	80071dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fd2e 	bl	80069a0 <USBD_CtlSendStatus>

              break;
 8005f44:	e004      	b.n	8005f50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f46:	6839      	ldr	r1, [r7, #0]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fc5e 	bl	800680a <USBD_CtlError>
              break;
 8005f4e:	bf00      	nop
          }
          break;
 8005f50:	e107      	b.n	8006162 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d002      	beq.n	8005f64 <USBD_StdEPReq+0x124>
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d016      	beq.n	8005f90 <USBD_StdEPReq+0x150>
 8005f62:	e04b      	b.n	8005ffc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f64:	7bbb      	ldrb	r3, [r7, #14]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00d      	beq.n	8005f86 <USBD_StdEPReq+0x146>
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	2b80      	cmp	r3, #128	; 0x80
 8005f6e:	d00a      	beq.n	8005f86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 f931 	bl	80071dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f7a:	2180      	movs	r1, #128	; 0x80
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 f92d 	bl	80071dc <USBD_LL_StallEP>
 8005f82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f84:	e040      	b.n	8006008 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fc3e 	bl	800680a <USBD_CtlError>
              break;
 8005f8e:	e03b      	b.n	8006008 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	885b      	ldrh	r3, [r3, #2]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d136      	bne.n	8006006 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f98:	7bbb      	ldrb	r3, [r7, #14]
 8005f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fa2:	7bbb      	ldrb	r3, [r7, #14]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 f937 	bl	800721a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fcf7 	bl	80069a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fb2:	7bbb      	ldrb	r3, [r7, #14]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fde2 	bl	8005b80 <USBD_CoreFindEP>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fc0:	7b7b      	ldrb	r3, [r7, #13]
 8005fc2:	2bff      	cmp	r3, #255	; 0xff
 8005fc4:	d01f      	beq.n	8006006 <USBD_StdEPReq+0x1c6>
 8005fc6:	7b7b      	ldrb	r3, [r7, #13]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d11c      	bne.n	8006006 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005fcc:	7b7a      	ldrb	r2, [r7, #13]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005fd4:	7b7a      	ldrb	r2, [r7, #13]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	32ae      	adds	r2, #174	; 0xae
 8005fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d010      	beq.n	8006006 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005fe4:	7b7a      	ldrb	r2, [r7, #13]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	32ae      	adds	r2, #174	; 0xae
 8005fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	4798      	blx	r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005ffa:	e004      	b.n	8006006 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fc03 	bl	800680a <USBD_CtlError>
              break;
 8006004:	e000      	b.n	8006008 <USBD_StdEPReq+0x1c8>
              break;
 8006006:	bf00      	nop
          }
          break;
 8006008:	e0ab      	b.n	8006162 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d002      	beq.n	800601c <USBD_StdEPReq+0x1dc>
 8006016:	2b03      	cmp	r3, #3
 8006018:	d032      	beq.n	8006080 <USBD_StdEPReq+0x240>
 800601a:	e097      	b.n	800614c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <USBD_StdEPReq+0x1f2>
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	2b80      	cmp	r3, #128	; 0x80
 8006026:	d004      	beq.n	8006032 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fbed 	bl	800680a <USBD_CtlError>
                break;
 8006030:	e091      	b.n	8006156 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006036:	2b00      	cmp	r3, #0
 8006038:	da0b      	bge.n	8006052 <USBD_StdEPReq+0x212>
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	3310      	adds	r3, #16
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4413      	add	r3, r2
 800604e:	3304      	adds	r3, #4
 8006050:	e00b      	b.n	800606a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	4413      	add	r3, r2
 8006068:	3304      	adds	r3, #4
 800606a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2202      	movs	r2, #2
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fc37 	bl	80068ec <USBD_CtlSendData>
              break;
 800607e:	e06a      	b.n	8006156 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006084:	2b00      	cmp	r3, #0
 8006086:	da11      	bge.n	80060ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006088:	7bbb      	ldrb	r3, [r7, #14]
 800608a:	f003 020f 	and.w	r2, r3, #15
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	3324      	adds	r3, #36	; 0x24
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d117      	bne.n	80060d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fbb0 	bl	800680a <USBD_CtlError>
                  break;
 80060aa:	e054      	b.n	8006156 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80060ac:	7bbb      	ldrb	r3, [r7, #14]
 80060ae:	f003 020f 	and.w	r2, r3, #15
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d104      	bne.n	80060d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fb9d 	bl	800680a <USBD_CtlError>
                  break;
 80060d0:	e041      	b.n	8006156 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da0b      	bge.n	80060f2 <USBD_StdEPReq+0x2b2>
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	3310      	adds	r3, #16
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	4413      	add	r3, r2
 80060ee:	3304      	adds	r3, #4
 80060f0:	e00b      	b.n	800610a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	4413      	add	r3, r2
 8006108:	3304      	adds	r3, #4
 800610a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <USBD_StdEPReq+0x2d8>
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	2b80      	cmp	r3, #128	; 0x80
 8006116:	d103      	bne.n	8006120 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e00e      	b.n	800613e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006120:	7bbb      	ldrb	r3, [r7, #14]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 f897 	bl	8007258 <USBD_LL_IsStallEP>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e002      	b.n	800613e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2202      	movs	r2, #2
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fbd1 	bl	80068ec <USBD_CtlSendData>
              break;
 800614a:	e004      	b.n	8006156 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fb5b 	bl	800680a <USBD_CtlError>
              break;
 8006154:	bf00      	nop
          }
          break;
 8006156:	e004      	b.n	8006162 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fb55 	bl	800680a <USBD_CtlError>
          break;
 8006160:	bf00      	nop
      }
      break;
 8006162:	e005      	b.n	8006170 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fb4f 	bl	800680a <USBD_CtlError>
      break;
 800616c:	e000      	b.n	8006170 <USBD_StdEPReq+0x330>
      break;
 800616e:	bf00      	nop
  }

  return ret;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	885b      	ldrh	r3, [r3, #2]
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	2b06      	cmp	r3, #6
 800619e:	f200 8128 	bhi.w	80063f2 <USBD_GetDescriptor+0x276>
 80061a2:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <USBD_GetDescriptor+0x2c>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061c5 	.word	0x080061c5
 80061ac:	080061dd 	.word	0x080061dd
 80061b0:	0800621d 	.word	0x0800621d
 80061b4:	080063f3 	.word	0x080063f3
 80061b8:	080063f3 	.word	0x080063f3
 80061bc:	08006393 	.word	0x08006393
 80061c0:	080063bf 	.word	0x080063bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	7c12      	ldrb	r2, [r2, #16]
 80061d0:	f107 0108 	add.w	r1, r7, #8
 80061d4:	4610      	mov	r0, r2
 80061d6:	4798      	blx	r3
 80061d8:	60f8      	str	r0, [r7, #12]
      break;
 80061da:	e112      	b.n	8006402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7c1b      	ldrb	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10d      	bne.n	8006200 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	f107 0208 	add.w	r2, r7, #8
 80061f0:	4610      	mov	r0, r2
 80061f2:	4798      	blx	r3
 80061f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	2202      	movs	r2, #2
 80061fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061fe:	e100      	b.n	8006402 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	f107 0208 	add.w	r2, r7, #8
 800620c:	4610      	mov	r0, r2
 800620e:	4798      	blx	r3
 8006210:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3301      	adds	r3, #1
 8006216:	2202      	movs	r2, #2
 8006218:	701a      	strb	r2, [r3, #0]
      break;
 800621a:	e0f2      	b.n	8006402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	885b      	ldrh	r3, [r3, #2]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b05      	cmp	r3, #5
 8006224:	f200 80ac 	bhi.w	8006380 <USBD_GetDescriptor+0x204>
 8006228:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <USBD_GetDescriptor+0xb4>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	08006249 	.word	0x08006249
 8006234:	0800627d 	.word	0x0800627d
 8006238:	080062b1 	.word	0x080062b1
 800623c:	080062e5 	.word	0x080062e5
 8006240:	08006319 	.word	0x08006319
 8006244:	0800634d 	.word	0x0800634d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	7c12      	ldrb	r2, [r2, #16]
 8006260:	f107 0108 	add.w	r1, r7, #8
 8006264:	4610      	mov	r0, r2
 8006266:	4798      	blx	r3
 8006268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800626a:	e091      	b.n	8006390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 facb 	bl	800680a <USBD_CtlError>
            err++;
 8006274:	7afb      	ldrb	r3, [r7, #11]
 8006276:	3301      	adds	r3, #1
 8006278:	72fb      	strb	r3, [r7, #11]
          break;
 800627a:	e089      	b.n	8006390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	7c12      	ldrb	r2, [r2, #16]
 8006294:	f107 0108 	add.w	r1, r7, #8
 8006298:	4610      	mov	r0, r2
 800629a:	4798      	blx	r3
 800629c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800629e:	e077      	b.n	8006390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fab1 	bl	800680a <USBD_CtlError>
            err++;
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	3301      	adds	r3, #1
 80062ac:	72fb      	strb	r3, [r7, #11]
          break;
 80062ae:	e06f      	b.n	8006390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	7c12      	ldrb	r2, [r2, #16]
 80062c8:	f107 0108 	add.w	r1, r7, #8
 80062cc:	4610      	mov	r0, r2
 80062ce:	4798      	blx	r3
 80062d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062d2:	e05d      	b.n	8006390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa97 	bl	800680a <USBD_CtlError>
            err++;
 80062dc:	7afb      	ldrb	r3, [r7, #11]
 80062de:	3301      	adds	r3, #1
 80062e0:	72fb      	strb	r3, [r7, #11]
          break;
 80062e2:	e055      	b.n	8006390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	7c12      	ldrb	r2, [r2, #16]
 80062fc:	f107 0108 	add.w	r1, r7, #8
 8006300:	4610      	mov	r0, r2
 8006302:	4798      	blx	r3
 8006304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006306:	e043      	b.n	8006390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fa7d 	bl	800680a <USBD_CtlError>
            err++;
 8006310:	7afb      	ldrb	r3, [r7, #11]
 8006312:	3301      	adds	r3, #1
 8006314:	72fb      	strb	r3, [r7, #11]
          break;
 8006316:	e03b      	b.n	8006390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	7c12      	ldrb	r2, [r2, #16]
 8006330:	f107 0108 	add.w	r1, r7, #8
 8006334:	4610      	mov	r0, r2
 8006336:	4798      	blx	r3
 8006338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800633a:	e029      	b.n	8006390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa63 	bl	800680a <USBD_CtlError>
            err++;
 8006344:	7afb      	ldrb	r3, [r7, #11]
 8006346:	3301      	adds	r3, #1
 8006348:	72fb      	strb	r3, [r7, #11]
          break;
 800634a:	e021      	b.n	8006390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00b      	beq.n	8006370 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	7c12      	ldrb	r2, [r2, #16]
 8006364:	f107 0108 	add.w	r1, r7, #8
 8006368:	4610      	mov	r0, r2
 800636a:	4798      	blx	r3
 800636c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800636e:	e00f      	b.n	8006390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa49 	bl	800680a <USBD_CtlError>
            err++;
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	3301      	adds	r3, #1
 800637c:	72fb      	strb	r3, [r7, #11]
          break;
 800637e:	e007      	b.n	8006390 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fa41 	bl	800680a <USBD_CtlError>
          err++;
 8006388:	7afb      	ldrb	r3, [r7, #11]
 800638a:	3301      	adds	r3, #1
 800638c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800638e:	bf00      	nop
      }
      break;
 8006390:	e037      	b.n	8006402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	7c1b      	ldrb	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a2:	f107 0208 	add.w	r2, r7, #8
 80063a6:	4610      	mov	r0, r2
 80063a8:	4798      	blx	r3
 80063aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063ac:	e029      	b.n	8006402 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fa2a 	bl	800680a <USBD_CtlError>
        err++;
 80063b6:	7afb      	ldrb	r3, [r7, #11]
 80063b8:	3301      	adds	r3, #1
 80063ba:	72fb      	strb	r3, [r7, #11]
      break;
 80063bc:	e021      	b.n	8006402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7c1b      	ldrb	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10d      	bne.n	80063e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	f107 0208 	add.w	r2, r7, #8
 80063d2:	4610      	mov	r0, r2
 80063d4:	4798      	blx	r3
 80063d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	2207      	movs	r2, #7
 80063de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063e0:	e00f      	b.n	8006402 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fa10 	bl	800680a <USBD_CtlError>
        err++;
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	3301      	adds	r3, #1
 80063ee:	72fb      	strb	r3, [r7, #11]
      break;
 80063f0:	e007      	b.n	8006402 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fa08 	bl	800680a <USBD_CtlError>
      err++;
 80063fa:	7afb      	ldrb	r3, [r7, #11]
 80063fc:	3301      	adds	r3, #1
 80063fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006400:	bf00      	nop
  }

  if (err != 0U)
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d11e      	bne.n	8006446 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	88db      	ldrh	r3, [r3, #6]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d016      	beq.n	800643e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006410:	893b      	ldrh	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00e      	beq.n	8006434 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	88da      	ldrh	r2, [r3, #6]
 800641a:	893b      	ldrh	r3, [r7, #8]
 800641c:	4293      	cmp	r3, r2
 800641e:	bf28      	it	cs
 8006420:	4613      	movcs	r3, r2
 8006422:	b29b      	uxth	r3, r3
 8006424:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006426:	893b      	ldrh	r3, [r7, #8]
 8006428:	461a      	mov	r2, r3
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa5d 	bl	80068ec <USBD_CtlSendData>
 8006432:	e009      	b.n	8006448 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9e7 	bl	800680a <USBD_CtlError>
 800643c:	e004      	b.n	8006448 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 faae 	bl	80069a0 <USBD_CtlSendStatus>
 8006444:	e000      	b.n	8006448 <USBD_GetDescriptor+0x2cc>
    return;
 8006446:	bf00      	nop
  }
}
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop

08006450 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	889b      	ldrh	r3, [r3, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d131      	bne.n	80064c6 <USBD_SetAddress+0x76>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	88db      	ldrh	r3, [r3, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d12d      	bne.n	80064c6 <USBD_SetAddress+0x76>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	885b      	ldrh	r3, [r3, #2]
 800646e:	2b7f      	cmp	r3, #127	; 0x7f
 8006470:	d829      	bhi.n	80064c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	885b      	ldrh	r3, [r3, #2]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b03      	cmp	r3, #3
 8006488:	d104      	bne.n	8006494 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f9bc 	bl	800680a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006492:	e01d      	b.n	80064d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	7bfa      	ldrb	r2, [r7, #15]
 8006498:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 ff05 	bl	80072b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa7a 	bl	80069a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ba:	e009      	b.n	80064d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c4:	e004      	b.n	80064d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f99e 	bl	800680a <USBD_CtlError>
  }
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	885b      	ldrh	r3, [r3, #2]
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	4b4e      	ldr	r3, [pc, #312]	; (8006628 <USBD_SetConfig+0x150>)
 80064ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064f0:	4b4d      	ldr	r3, [pc, #308]	; (8006628 <USBD_SetConfig+0x150>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d905      	bls.n	8006504 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f985 	bl	800680a <USBD_CtlError>
    return USBD_FAIL;
 8006500:	2303      	movs	r3, #3
 8006502:	e08c      	b.n	800661e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d002      	beq.n	8006516 <USBD_SetConfig+0x3e>
 8006510:	2b03      	cmp	r3, #3
 8006512:	d029      	beq.n	8006568 <USBD_SetConfig+0x90>
 8006514:	e075      	b.n	8006602 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006516:	4b44      	ldr	r3, [pc, #272]	; (8006628 <USBD_SetConfig+0x150>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d020      	beq.n	8006560 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800651e:	4b42      	ldr	r3, [pc, #264]	; (8006628 <USBD_SetConfig+0x150>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006528:	4b3f      	ldr	r3, [pc, #252]	; (8006628 <USBD_SetConfig+0x150>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fe ffe7 	bl	8005502 <USBD_SetClassConfig>
 8006534:	4603      	mov	r3, r0
 8006536:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d008      	beq.n	8006550 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f962 	bl	800680a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800654e:	e065      	b.n	800661c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa25 	bl	80069a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2203      	movs	r2, #3
 800655a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800655e:	e05d      	b.n	800661c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fa1d 	bl	80069a0 <USBD_CtlSendStatus>
      break;
 8006566:	e059      	b.n	800661c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006568:	4b2f      	ldr	r3, [pc, #188]	; (8006628 <USBD_SetConfig+0x150>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d112      	bne.n	8006596 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006578:	4b2b      	ldr	r3, [pc, #172]	; (8006628 <USBD_SetConfig+0x150>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006582:	4b29      	ldr	r3, [pc, #164]	; (8006628 <USBD_SetConfig+0x150>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7fe ffd6 	bl	800553a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa06 	bl	80069a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006594:	e042      	b.n	800661c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006596:	4b24      	ldr	r3, [pc, #144]	; (8006628 <USBD_SetConfig+0x150>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d02a      	beq.n	80065fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fe ffc4 	bl	800553a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80065b2:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <USBD_SetConfig+0x150>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065bc:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <USBD_SetConfig+0x150>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fe ff9d 	bl	8005502 <USBD_SetClassConfig>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00f      	beq.n	80065f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f918 	bl	800680a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fe ffa9 	bl	800553a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80065f0:	e014      	b.n	800661c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f9d4 	bl	80069a0 <USBD_CtlSendStatus>
      break;
 80065f8:	e010      	b.n	800661c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f9d0 	bl	80069a0 <USBD_CtlSendStatus>
      break;
 8006600:	e00c      	b.n	800661c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f900 	bl	800680a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <USBD_SetConfig+0x150>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fe ff92 	bl	800553a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006616:	2303      	movs	r3, #3
 8006618:	73fb      	strb	r3, [r7, #15]
      break;
 800661a:	bf00      	nop
  }

  return ret;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	2000016c 	.word	0x2000016c

0800662c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	88db      	ldrh	r3, [r3, #6]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d004      	beq.n	8006648 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f8e2 	bl	800680a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006646:	e023      	b.n	8006690 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	dc02      	bgt.n	800665a <USBD_GetConfig+0x2e>
 8006654:	2b00      	cmp	r3, #0
 8006656:	dc03      	bgt.n	8006660 <USBD_GetConfig+0x34>
 8006658:	e015      	b.n	8006686 <USBD_GetConfig+0x5a>
 800665a:	2b03      	cmp	r3, #3
 800665c:	d00b      	beq.n	8006676 <USBD_GetConfig+0x4a>
 800665e:	e012      	b.n	8006686 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3308      	adds	r3, #8
 800666a:	2201      	movs	r2, #1
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f93c 	bl	80068ec <USBD_CtlSendData>
        break;
 8006674:	e00c      	b.n	8006690 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3304      	adds	r3, #4
 800667a:	2201      	movs	r2, #1
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f934 	bl	80068ec <USBD_CtlSendData>
        break;
 8006684:	e004      	b.n	8006690 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f8be 	bl	800680a <USBD_CtlError>
        break;
 800668e:	bf00      	nop
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d81e      	bhi.n	80066ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	88db      	ldrh	r3, [r3, #6]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d004      	beq.n	80066c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f8a5 	bl	800680a <USBD_CtlError>
        break;
 80066c0:	e01a      	b.n	80066f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f043 0202 	orr.w	r2, r3, #2
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	330c      	adds	r3, #12
 80066e2:	2202      	movs	r2, #2
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f900 	bl	80068ec <USBD_CtlSendData>
      break;
 80066ec:	e004      	b.n	80066f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f88a 	bl	800680a <USBD_CtlError>
      break;
 80066f6:	bf00      	nop
  }
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	885b      	ldrh	r3, [r3, #2]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d107      	bne.n	8006722 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f940 	bl	80069a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006720:	e013      	b.n	800674a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	885b      	ldrh	r3, [r3, #2]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d10b      	bne.n	8006742 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	889b      	ldrh	r3, [r3, #4]
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	b29b      	uxth	r3, r3
 8006732:	b2da      	uxtb	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f930 	bl	80069a0 <USBD_CtlSendStatus>
}
 8006740:	e003      	b.n	800674a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f860 	bl	800680a <USBD_CtlError>
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006762:	b2db      	uxtb	r3, r3
 8006764:	3b01      	subs	r3, #1
 8006766:	2b02      	cmp	r3, #2
 8006768:	d80b      	bhi.n	8006782 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	885b      	ldrh	r3, [r3, #2]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d10c      	bne.n	800678c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f910 	bl	80069a0 <USBD_CtlSendStatus>
      }
      break;
 8006780:	e004      	b.n	800678c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f840 	bl	800680a <USBD_CtlError>
      break;
 800678a:	e000      	b.n	800678e <USBD_ClrFeature+0x3c>
      break;
 800678c:	bf00      	nop
  }
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3301      	adds	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7ff fa41 	bl	8005c48 <SWAPBYTE>
 80067c6:	4603      	mov	r3, r0
 80067c8:	461a      	mov	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff fa34 	bl	8005c48 <SWAPBYTE>
 80067e0:	4603      	mov	r3, r0
 80067e2:	461a      	mov	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f7ff fa27 	bl	8005c48 <SWAPBYTE>
 80067fa:	4603      	mov	r3, r0
 80067fc:	461a      	mov	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	80da      	strh	r2, [r3, #6]
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006814:	2180      	movs	r1, #128	; 0x80
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fce0 	bl	80071dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800681c:	2100      	movs	r1, #0
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fcdc 	bl	80071dc <USBD_LL_StallEP>
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d036      	beq.n	80068b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006846:	6938      	ldr	r0, [r7, #16]
 8006848:	f000 f836 	bl	80068b8 <USBD_GetLen>
 800684c:	4603      	mov	r3, r0
 800684e:	3301      	adds	r3, #1
 8006850:	b29b      	uxth	r3, r3
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	4413      	add	r3, r2
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	7812      	ldrb	r2, [r2, #0]
 8006864:	701a      	strb	r2, [r3, #0]
  idx++;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	3301      	adds	r3, #1
 800686a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	4413      	add	r3, r2
 8006872:	2203      	movs	r2, #3
 8006874:	701a      	strb	r2, [r3, #0]
  idx++;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	3301      	adds	r3, #1
 800687a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800687c:	e013      	b.n	80068a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	4413      	add	r3, r2
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	3301      	adds	r3, #1
 800688e:	613b      	str	r3, [r7, #16]
    idx++;
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	3301      	adds	r3, #1
 8006894:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	4413      	add	r3, r2
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
    idx++;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	3301      	adds	r3, #1
 80068a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e7      	bne.n	800687e <USBD_GetString+0x52>
 80068ae:	e000      	b.n	80068b2 <USBD_GetString+0x86>
    return;
 80068b0:	bf00      	nop
  }
}
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068c8:	e005      	b.n	80068d6 <USBD_GetLen+0x1e>
  {
    len++;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	3301      	adds	r3, #1
 80068ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	3301      	adds	r3, #1
 80068d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f5      	bne.n	80068ca <USBD_GetLen+0x12>
  }

  return len;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	2100      	movs	r1, #0
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 fceb 	bl	80072ee <USBD_LL_Transmit>

  return USBD_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	2100      	movs	r1, #0
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fcda 	bl	80072ee <USBD_LL_Transmit>

  return USBD_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2203      	movs	r2, #3
 8006954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	2100      	movs	r1, #0
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fcde 	bl	8007330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	2100      	movs	r1, #0
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fccd 	bl	8007330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2204      	movs	r2, #4
 80069ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069b0:	2300      	movs	r3, #0
 80069b2:	2200      	movs	r2, #0
 80069b4:	2100      	movs	r1, #0
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fc99 	bl	80072ee <USBD_LL_Transmit>

  return USBD_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2205      	movs	r2, #5
 80069d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069d6:	2300      	movs	r3, #0
 80069d8:	2200      	movs	r2, #0
 80069da:	2100      	movs	r1, #0
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fca7 	bl	8007330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80069f0:	2200      	movs	r2, #0
 80069f2:	4912      	ldr	r1, [pc, #72]	; (8006a3c <MX_USB_DEVICE_Init+0x50>)
 80069f4:	4812      	ldr	r0, [pc, #72]	; (8006a40 <MX_USB_DEVICE_Init+0x54>)
 80069f6:	f7fe fd07 	bl	8005408 <USBD_Init>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a00:	f7f9 fee4 	bl	80007cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006a04:	490f      	ldr	r1, [pc, #60]	; (8006a44 <MX_USB_DEVICE_Init+0x58>)
 8006a06:	480e      	ldr	r0, [pc, #56]	; (8006a40 <MX_USB_DEVICE_Init+0x54>)
 8006a08:	f7fe fd2e 	bl	8005468 <USBD_RegisterClass>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a12:	f7f9 fedb 	bl	80007cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a16:	490c      	ldr	r1, [pc, #48]	; (8006a48 <MX_USB_DEVICE_Init+0x5c>)
 8006a18:	4809      	ldr	r0, [pc, #36]	; (8006a40 <MX_USB_DEVICE_Init+0x54>)
 8006a1a:	f7fe fc1f 	bl	800525c <USBD_CDC_RegisterInterface>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a24:	f7f9 fed2 	bl	80007cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a28:	4805      	ldr	r0, [pc, #20]	; (8006a40 <MX_USB_DEVICE_Init+0x54>)
 8006a2a:	f7fe fd53 	bl	80054d4 <USBD_Start>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a34:	f7f9 feca 	bl	80007cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a38:	bf00      	nop
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	200000b0 	.word	0x200000b0
 8006a40:	20000170 	.word	0x20000170
 8006a44:	2000001c 	.word	0x2000001c
 8006a48:	2000009c 	.word	0x2000009c

08006a4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006a50:	2200      	movs	r2, #0
 8006a52:	4905      	ldr	r1, [pc, #20]	; (8006a68 <CDC_Init_FS+0x1c>)
 8006a54:	4805      	ldr	r0, [pc, #20]	; (8006a6c <CDC_Init_FS+0x20>)
 8006a56:	f7fe fc1b 	bl	8005290 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006a5a:	4905      	ldr	r1, [pc, #20]	; (8006a70 <CDC_Init_FS+0x24>)
 8006a5c:	4803      	ldr	r0, [pc, #12]	; (8006a6c <CDC_Init_FS+0x20>)
 8006a5e:	f7fe fc39 	bl	80052d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006a62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000c4c 	.word	0x20000c4c
 8006a6c:	20000170 	.word	0x20000170
 8006a70:	2000044c 	.word	0x2000044c

08006a74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	6039      	str	r1, [r7, #0]
 8006a8e:	71fb      	strb	r3, [r7, #7]
 8006a90:	4613      	mov	r3, r2
 8006a92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	2b23      	cmp	r3, #35	; 0x23
 8006a98:	d84a      	bhi.n	8006b30 <CDC_Control_FS+0xac>
 8006a9a:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <CDC_Control_FS+0x1c>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006b31 	.word	0x08006b31
 8006aa4:	08006b31 	.word	0x08006b31
 8006aa8:	08006b31 	.word	0x08006b31
 8006aac:	08006b31 	.word	0x08006b31
 8006ab0:	08006b31 	.word	0x08006b31
 8006ab4:	08006b31 	.word	0x08006b31
 8006ab8:	08006b31 	.word	0x08006b31
 8006abc:	08006b31 	.word	0x08006b31
 8006ac0:	08006b31 	.word	0x08006b31
 8006ac4:	08006b31 	.word	0x08006b31
 8006ac8:	08006b31 	.word	0x08006b31
 8006acc:	08006b31 	.word	0x08006b31
 8006ad0:	08006b31 	.word	0x08006b31
 8006ad4:	08006b31 	.word	0x08006b31
 8006ad8:	08006b31 	.word	0x08006b31
 8006adc:	08006b31 	.word	0x08006b31
 8006ae0:	08006b31 	.word	0x08006b31
 8006ae4:	08006b31 	.word	0x08006b31
 8006ae8:	08006b31 	.word	0x08006b31
 8006aec:	08006b31 	.word	0x08006b31
 8006af0:	08006b31 	.word	0x08006b31
 8006af4:	08006b31 	.word	0x08006b31
 8006af8:	08006b31 	.word	0x08006b31
 8006afc:	08006b31 	.word	0x08006b31
 8006b00:	08006b31 	.word	0x08006b31
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	08006b31 	.word	0x08006b31
 8006b0c:	08006b31 	.word	0x08006b31
 8006b10:	08006b31 	.word	0x08006b31
 8006b14:	08006b31 	.word	0x08006b31
 8006b18:	08006b31 	.word	0x08006b31
 8006b1c:	08006b31 	.word	0x08006b31
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006b31 	.word	0x08006b31
 8006b28:	08006b31 	.word	0x08006b31
 8006b2c:	08006b31 	.word	0x08006b31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006b30:	bf00      	nop
  }

  return (USBD_OK);
 8006b32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	4805      	ldr	r0, [pc, #20]	; (8006b64 <CDC_Receive_FS+0x24>)
 8006b4e:	f7fe fbc1 	bl	80052d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b52:	4804      	ldr	r0, [pc, #16]	; (8006b64 <CDC_Receive_FS+0x24>)
 8006b54:	f7fe fc22 	bl	800539c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006b58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20000170 	.word	0x20000170

08006b68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b78:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <CDC_Transmit_FS+0x48>)
 8006b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e00b      	b.n	8006ba6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b8e:	887b      	ldrh	r3, [r7, #2]
 8006b90:	461a      	mov	r2, r3
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	4806      	ldr	r0, [pc, #24]	; (8006bb0 <CDC_Transmit_FS+0x48>)
 8006b96:	f7fe fb7b 	bl	8005290 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b9a:	4805      	ldr	r0, [pc, #20]	; (8006bb0 <CDC_Transmit_FS+0x48>)
 8006b9c:	f7fe fbb8 	bl	8005310 <USBD_CDC_TransmitPacket>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000170 	.word	0x20000170

08006bb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	6039      	str	r1, [r7, #0]
 8006be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2212      	movs	r2, #18
 8006be8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006bea:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	200000cc 	.word	0x200000cc

08006bfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	4603      	mov	r3, r0
 8006c04:	6039      	str	r1, [r7, #0]
 8006c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c0e:	4b03      	ldr	r3, [pc, #12]	; (8006c1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	200000e0 	.word	0x200000e0

08006c20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	6039      	str	r1, [r7, #0]
 8006c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d105      	bne.n	8006c3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	4907      	ldr	r1, [pc, #28]	; (8006c54 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c36:	4808      	ldr	r0, [pc, #32]	; (8006c58 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c38:	f7ff fdf8 	bl	800682c <USBD_GetString>
 8006c3c:	e004      	b.n	8006c48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	4904      	ldr	r1, [pc, #16]	; (8006c54 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c42:	4805      	ldr	r0, [pc, #20]	; (8006c58 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c44:	f7ff fdf2 	bl	800682c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c48:	4b02      	ldr	r3, [pc, #8]	; (8006c54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	2000144c 	.word	0x2000144c
 8006c58:	080074a4 	.word	0x080074a4

08006c5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	6039      	str	r1, [r7, #0]
 8006c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	4904      	ldr	r1, [pc, #16]	; (8006c7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c6c:	4804      	ldr	r0, [pc, #16]	; (8006c80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c6e:	f7ff fddd 	bl	800682c <USBD_GetString>
  return USBD_StrDesc;
 8006c72:	4b02      	ldr	r3, [pc, #8]	; (8006c7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	2000144c 	.word	0x2000144c
 8006c80:	080074bc 	.word	0x080074bc

08006c84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	6039      	str	r1, [r7, #0]
 8006c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	221a      	movs	r2, #26
 8006c94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c96:	f000 f843 	bl	8006d20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c9a:	4b02      	ldr	r3, [pc, #8]	; (8006ca4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	200000e4 	.word	0x200000e4

08006ca8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	6039      	str	r1, [r7, #0]
 8006cb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d105      	bne.n	8006cc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	4907      	ldr	r1, [pc, #28]	; (8006cdc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cbe:	4808      	ldr	r0, [pc, #32]	; (8006ce0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006cc0:	f7ff fdb4 	bl	800682c <USBD_GetString>
 8006cc4:	e004      	b.n	8006cd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	4904      	ldr	r1, [pc, #16]	; (8006cdc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cca:	4805      	ldr	r0, [pc, #20]	; (8006ce0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ccc:	f7ff fdae 	bl	800682c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cd0:	4b02      	ldr	r3, [pc, #8]	; (8006cdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	2000144c 	.word	0x2000144c
 8006ce0:	080074d0 	.word	0x080074d0

08006ce4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	6039      	str	r1, [r7, #0]
 8006cee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d105      	bne.n	8006d02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	4907      	ldr	r1, [pc, #28]	; (8006d18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cfa:	4808      	ldr	r0, [pc, #32]	; (8006d1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cfc:	f7ff fd96 	bl	800682c <USBD_GetString>
 8006d00:	e004      	b.n	8006d0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	4904      	ldr	r1, [pc, #16]	; (8006d18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d06:	4805      	ldr	r0, [pc, #20]	; (8006d1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d08:	f7ff fd90 	bl	800682c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d0c:	4b02      	ldr	r3, [pc, #8]	; (8006d18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	2000144c 	.word	0x2000144c
 8006d1c:	080074dc 	.word	0x080074dc

08006d20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d26:	4b0f      	ldr	r3, [pc, #60]	; (8006d64 <Get_SerialNum+0x44>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d2c:	4b0e      	ldr	r3, [pc, #56]	; (8006d68 <Get_SerialNum+0x48>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d32:	4b0e      	ldr	r3, [pc, #56]	; (8006d6c <Get_SerialNum+0x4c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d46:	2208      	movs	r2, #8
 8006d48:	4909      	ldr	r1, [pc, #36]	; (8006d70 <Get_SerialNum+0x50>)
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f814 	bl	8006d78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d50:	2204      	movs	r2, #4
 8006d52:	4908      	ldr	r1, [pc, #32]	; (8006d74 <Get_SerialNum+0x54>)
 8006d54:	68b8      	ldr	r0, [r7, #8]
 8006d56:	f000 f80f 	bl	8006d78 <IntToUnicode>
  }
}
 8006d5a:	bf00      	nop
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	1fff7a10 	.word	0x1fff7a10
 8006d68:	1fff7a14 	.word	0x1fff7a14
 8006d6c:	1fff7a18 	.word	0x1fff7a18
 8006d70:	200000e6 	.word	0x200000e6
 8006d74:	200000f6 	.word	0x200000f6

08006d78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	75fb      	strb	r3, [r7, #23]
 8006d8e:	e027      	b.n	8006de0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	0f1b      	lsrs	r3, r3, #28
 8006d94:	2b09      	cmp	r3, #9
 8006d96:	d80b      	bhi.n	8006db0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	0f1b      	lsrs	r3, r3, #28
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	4619      	mov	r1, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	440b      	add	r3, r1
 8006da8:	3230      	adds	r2, #48	; 0x30
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	e00a      	b.n	8006dc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	0f1b      	lsrs	r3, r3, #28
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	4619      	mov	r1, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3237      	adds	r2, #55	; 0x37
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	75fb      	strb	r3, [r7, #23]
 8006de0:	7dfa      	ldrb	r2, [r7, #23]
 8006de2:	79fb      	ldrb	r3, [r7, #7]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d3d3      	bcc.n	8006d90 <IntToUnicode+0x18>
  }
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e00:	f107 0314 	add.w	r3, r7, #20
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	605a      	str	r2, [r3, #4]
 8006e0a:	609a      	str	r2, [r3, #8]
 8006e0c:	60da      	str	r2, [r3, #12]
 8006e0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e18:	d13a      	bne.n	8006e90 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	4b1e      	ldr	r3, [pc, #120]	; (8006e98 <HAL_PCD_MspInit+0xa0>)
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	4a1d      	ldr	r2, [pc, #116]	; (8006e98 <HAL_PCD_MspInit+0xa0>)
 8006e24:	f043 0301 	orr.w	r3, r3, #1
 8006e28:	6313      	str	r3, [r2, #48]	; 0x30
 8006e2a:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <HAL_PCD_MspInit+0xa0>)
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006e36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e40:	2300      	movs	r3, #0
 8006e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e44:	2303      	movs	r3, #3
 8006e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e48:	230a      	movs	r3, #10
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e4c:	f107 0314 	add.w	r3, r7, #20
 8006e50:	4619      	mov	r1, r3
 8006e52:	4812      	ldr	r0, [pc, #72]	; (8006e9c <HAL_PCD_MspInit+0xa4>)
 8006e54:	f7f9 ff66 	bl	8000d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006e58:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <HAL_PCD_MspInit+0xa0>)
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5c:	4a0e      	ldr	r2, [pc, #56]	; (8006e98 <HAL_PCD_MspInit+0xa0>)
 8006e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e62:	6353      	str	r3, [r2, #52]	; 0x34
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <HAL_PCD_MspInit+0xa0>)
 8006e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6c:	4a0a      	ldr	r2, [pc, #40]	; (8006e98 <HAL_PCD_MspInit+0xa0>)
 8006e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e72:	6453      	str	r3, [r2, #68]	; 0x44
 8006e74:	4b08      	ldr	r3, [pc, #32]	; (8006e98 <HAL_PCD_MspInit+0xa0>)
 8006e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e80:	2200      	movs	r2, #0
 8006e82:	2100      	movs	r1, #0
 8006e84:	2043      	movs	r0, #67	; 0x43
 8006e86:	f7f9 fefa 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e8a:	2043      	movs	r0, #67	; 0x43
 8006e8c:	f7f9 ff13 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e90:	bf00      	nop
 8006e92:	3728      	adds	r7, #40	; 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	40020000 	.word	0x40020000

08006ea0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f7fe fb59 	bl	800556e <USBD_LL_SetupStage>
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006ed6:	78fa      	ldrb	r2, [r7, #3]
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	4619      	mov	r1, r3
 8006eee:	f7fe fb93 	bl	8005618 <USBD_LL_DataOutStage>
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006f0c:	78fa      	ldrb	r2, [r7, #3]
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	334c      	adds	r3, #76	; 0x4c
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	4619      	mov	r1, r3
 8006f22:	f7fe fc2c 	bl	800577e <USBD_LL_DataInStage>
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe fd60 	bl	8005a02 <USBD_LL_SOF>
}
 8006f42:	bf00      	nop
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f52:	2301      	movs	r3, #1
 8006f54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
 8006f62:	e008      	b.n	8006f76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d102      	bne.n	8006f72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
 8006f70:	e001      	b.n	8006f76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006f72:	f7f9 fc2b 	bl	80007cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f7c:	7bfa      	ldrb	r2, [r7, #15]
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe fd00 	bl	8005986 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fca8 	bl	80058e2 <USBD_LL_Reset>
}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fcfb 	bl	80059a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fc2:	f043 0301 	orr.w	r3, r3, #1
 8006fc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006fd0:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <HAL_PCD_SuspendCallback+0x48>)
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	4a03      	ldr	r2, [pc, #12]	; (8006fe4 <HAL_PCD_SuspendCallback+0x48>)
 8006fd6:	f043 0306 	orr.w	r3, r3, #6
 8006fda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006fdc:	bf00      	nop
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	e000ed00 	.word	0xe000ed00

08006fe8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fceb 	bl	80059d2 <USBD_LL_Resume>
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fd43 	bl	8005aa6 <USBD_LL_IsoOUTIncomplete>
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fcff 	bl	8005a42 <USBD_LL_IsoINIncomplete>
}
 8007044:	bf00      	nop
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fd55 	bl	8005b0a <USBD_LL_DevConnected>
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fd52 	bl	8005b20 <USBD_LL_DevDisconnected>
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d13c      	bne.n	800710e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007094:	4a20      	ldr	r2, [pc, #128]	; (8007118 <USBD_LL_Init+0x94>)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a1e      	ldr	r2, [pc, #120]	; (8007118 <USBD_LL_Init+0x94>)
 80070a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80070a4:	4b1c      	ldr	r3, [pc, #112]	; (8007118 <USBD_LL_Init+0x94>)
 80070a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80070aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80070ac:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <USBD_LL_Init+0x94>)
 80070ae:	2204      	movs	r2, #4
 80070b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80070b2:	4b19      	ldr	r3, [pc, #100]	; (8007118 <USBD_LL_Init+0x94>)
 80070b4:	2202      	movs	r2, #2
 80070b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80070b8:	4b17      	ldr	r3, [pc, #92]	; (8007118 <USBD_LL_Init+0x94>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80070be:	4b16      	ldr	r3, [pc, #88]	; (8007118 <USBD_LL_Init+0x94>)
 80070c0:	2202      	movs	r2, #2
 80070c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80070c4:	4b14      	ldr	r3, [pc, #80]	; (8007118 <USBD_LL_Init+0x94>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80070ca:	4b13      	ldr	r3, [pc, #76]	; (8007118 <USBD_LL_Init+0x94>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80070d0:	4b11      	ldr	r3, [pc, #68]	; (8007118 <USBD_LL_Init+0x94>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80070d6:	4b10      	ldr	r3, [pc, #64]	; (8007118 <USBD_LL_Init+0x94>)
 80070d8:	2200      	movs	r2, #0
 80070da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80070dc:	4b0e      	ldr	r3, [pc, #56]	; (8007118 <USBD_LL_Init+0x94>)
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80070e2:	480d      	ldr	r0, [pc, #52]	; (8007118 <USBD_LL_Init+0x94>)
 80070e4:	f7f9 ffeb 	bl	80010be <HAL_PCD_Init>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80070ee:	f7f9 fb6d 	bl	80007cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80070f2:	2180      	movs	r1, #128	; 0x80
 80070f4:	4808      	ldr	r0, [pc, #32]	; (8007118 <USBD_LL_Init+0x94>)
 80070f6:	f7fb fa42 	bl	800257e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80070fa:	2240      	movs	r2, #64	; 0x40
 80070fc:	2100      	movs	r1, #0
 80070fe:	4806      	ldr	r0, [pc, #24]	; (8007118 <USBD_LL_Init+0x94>)
 8007100:	f7fb f9f6 	bl	80024f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007104:	2280      	movs	r2, #128	; 0x80
 8007106:	2101      	movs	r1, #1
 8007108:	4803      	ldr	r0, [pc, #12]	; (8007118 <USBD_LL_Init+0x94>)
 800710a:	f7fb f9f1 	bl	80024f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	2000164c 	.word	0x2000164c

0800711c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007132:	4618      	mov	r0, r3
 8007134:	f7fa f8e0 	bl	80012f8 <HAL_PCD_Start>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 f942 	bl	80073c8 <USBD_Get_USB_Status>
 8007144:	4603      	mov	r3, r0
 8007146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007148:	7bbb      	ldrb	r3, [r7, #14]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	4608      	mov	r0, r1
 800715c:	4611      	mov	r1, r2
 800715e:	461a      	mov	r2, r3
 8007160:	4603      	mov	r3, r0
 8007162:	70fb      	strb	r3, [r7, #3]
 8007164:	460b      	mov	r3, r1
 8007166:	70bb      	strb	r3, [r7, #2]
 8007168:	4613      	mov	r3, r2
 800716a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800717a:	78bb      	ldrb	r3, [r7, #2]
 800717c:	883a      	ldrh	r2, [r7, #0]
 800717e:	78f9      	ldrb	r1, [r7, #3]
 8007180:	f7fa fdb1 	bl	8001ce6 <HAL_PCD_EP_Open>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f91c 	bl	80073c8 <USBD_Get_USB_Status>
 8007190:	4603      	mov	r3, r0
 8007192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007194:	7bbb      	ldrb	r3, [r7, #14]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	4611      	mov	r1, r2
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fa fdfa 	bl	8001db6 <HAL_PCD_EP_Close>
 80071c2:	4603      	mov	r3, r0
 80071c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 f8fd 	bl	80073c8 <USBD_Get_USB_Status>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071f6:	78fa      	ldrb	r2, [r7, #3]
 80071f8:	4611      	mov	r1, r2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fa fed2 	bl	8001fa4 <HAL_PCD_EP_SetStall>
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	4618      	mov	r0, r3
 8007208:	f000 f8de 	bl	80073c8 <USBD_Get_USB_Status>
 800720c:	4603      	mov	r3, r0
 800720e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007210:	7bbb      	ldrb	r3, [r7, #14]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007234:	78fa      	ldrb	r2, [r7, #3]
 8007236:	4611      	mov	r1, r2
 8007238:	4618      	mov	r0, r3
 800723a:	f7fa ff17 	bl	800206c <HAL_PCD_EP_ClrStall>
 800723e:	4603      	mov	r3, r0
 8007240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 f8bf 	bl	80073c8 <USBD_Get_USB_Status>
 800724a:	4603      	mov	r3, r0
 800724c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800724e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800726a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800726c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007270:	2b00      	cmp	r3, #0
 8007272:	da0b      	bge.n	800728c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800727a:	68f9      	ldr	r1, [r7, #12]
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	333e      	adds	r3, #62	; 0x3e
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	e00b      	b.n	80072a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007292:	68f9      	ldr	r1, [r7, #12]
 8007294:	4613      	mov	r3, r2
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4413      	add	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	440b      	add	r3, r1
 800729e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80072a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072ca:	78fa      	ldrb	r2, [r7, #3]
 80072cc:	4611      	mov	r1, r2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fa fce4 	bl	8001c9c <HAL_PCD_SetAddress>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f874 	bl	80073c8 <USBD_Get_USB_Status>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b086      	sub	sp, #24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
 80072fa:	460b      	mov	r3, r1
 80072fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800730c:	7af9      	ldrb	r1, [r7, #11]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	f7fa fdfd 	bl	8001f10 <HAL_PCD_EP_Transmit>
 8007316:	4603      	mov	r3, r0
 8007318:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	4618      	mov	r0, r3
 800731e:	f000 f853 	bl	80073c8 <USBD_Get_USB_Status>
 8007322:	4603      	mov	r3, r0
 8007324:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007326:	7dbb      	ldrb	r3, [r7, #22]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	607a      	str	r2, [r7, #4]
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	460b      	mov	r3, r1
 800733e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800734e:	7af9      	ldrb	r1, [r7, #11]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	f7fa fd79 	bl	8001e4a <HAL_PCD_EP_Receive>
 8007358:	4603      	mov	r3, r0
 800735a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 f832 	bl	80073c8 <USBD_Get_USB_Status>
 8007364:	4603      	mov	r3, r0
 8007366:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007368:	7dbb      	ldrb	r3, [r7, #22]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007384:	78fa      	ldrb	r2, [r7, #3]
 8007386:	4611      	mov	r1, r2
 8007388:	4618      	mov	r0, r3
 800738a:	f7fa fda9 	bl	8001ee0 <HAL_PCD_EP_GetRxCount>
 800738e:	4603      	mov	r3, r0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80073a0:	4b03      	ldr	r3, [pc, #12]	; (80073b0 <USBD_static_malloc+0x18>)
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20001b58 	.word	0x20001b58

080073b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]

}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d817      	bhi.n	800740c <USBD_Get_USB_Status+0x44>
 80073dc:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <USBD_Get_USB_Status+0x1c>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	080073f5 	.word	0x080073f5
 80073e8:	080073fb 	.word	0x080073fb
 80073ec:	08007401 	.word	0x08007401
 80073f0:	08007407 	.word	0x08007407
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]
    break;
 80073f8:	e00b      	b.n	8007412 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073fa:	2303      	movs	r3, #3
 80073fc:	73fb      	strb	r3, [r7, #15]
    break;
 80073fe:	e008      	b.n	8007412 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
    break;
 8007404:	e005      	b.n	8007412 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007406:	2303      	movs	r3, #3
 8007408:	73fb      	strb	r3, [r7, #15]
    break;
 800740a:	e002      	b.n	8007412 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800740c:	2303      	movs	r3, #3
 800740e:	73fb      	strb	r3, [r7, #15]
    break;
 8007410:	bf00      	nop
  }
  return usb_status;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <__libc_init_array>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	4d0d      	ldr	r5, [pc, #52]	; (8007458 <__libc_init_array+0x38>)
 8007424:	4c0d      	ldr	r4, [pc, #52]	; (800745c <__libc_init_array+0x3c>)
 8007426:	1b64      	subs	r4, r4, r5
 8007428:	10a4      	asrs	r4, r4, #2
 800742a:	2600      	movs	r6, #0
 800742c:	42a6      	cmp	r6, r4
 800742e:	d109      	bne.n	8007444 <__libc_init_array+0x24>
 8007430:	4d0b      	ldr	r5, [pc, #44]	; (8007460 <__libc_init_array+0x40>)
 8007432:	4c0c      	ldr	r4, [pc, #48]	; (8007464 <__libc_init_array+0x44>)
 8007434:	f000 f820 	bl	8007478 <_init>
 8007438:	1b64      	subs	r4, r4, r5
 800743a:	10a4      	asrs	r4, r4, #2
 800743c:	2600      	movs	r6, #0
 800743e:	42a6      	cmp	r6, r4
 8007440:	d105      	bne.n	800744e <__libc_init_array+0x2e>
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	f855 3b04 	ldr.w	r3, [r5], #4
 8007448:	4798      	blx	r3
 800744a:	3601      	adds	r6, #1
 800744c:	e7ee      	b.n	800742c <__libc_init_array+0xc>
 800744e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007452:	4798      	blx	r3
 8007454:	3601      	adds	r6, #1
 8007456:	e7f2      	b.n	800743e <__libc_init_array+0x1e>
 8007458:	08007504 	.word	0x08007504
 800745c:	08007504 	.word	0x08007504
 8007460:	08007504 	.word	0x08007504
 8007464:	08007508 	.word	0x08007508

08007468 <memset>:
 8007468:	4402      	add	r2, r0
 800746a:	4603      	mov	r3, r0
 800746c:	4293      	cmp	r3, r2
 800746e:	d100      	bne.n	8007472 <memset+0xa>
 8007470:	4770      	bx	lr
 8007472:	f803 1b01 	strb.w	r1, [r3], #1
 8007476:	e7f9      	b.n	800746c <memset+0x4>

08007478 <_init>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr

08007484 <_fini>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	bf00      	nop
 8007488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748a:	bc08      	pop	{r3}
 800748c:	469e      	mov	lr, r3
 800748e:	4770      	bx	lr
